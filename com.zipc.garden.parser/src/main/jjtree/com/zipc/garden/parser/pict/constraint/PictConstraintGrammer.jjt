options
{
  STATIC = false;
  UNICODE_INPUT = true;
  MULTI = true;
  VISITOR = true;
}

PARSER_BEGIN(PictConstraintParser)
package com.zipc.garden.parser.pict.constraint;

public class PictConstraintParser {
}

PARSER_END(PictConstraintParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : // quoted identifier
{
  < QUOTATION_MARK : "\"" >
| < #ANY_UNICODE_CHARACTER : ~["\r", "\n"] >
}

TOKEN : // operators{
  < NOT_EQUAL : "<>" >
| < EQUAL : "=" >
| < AND : ["a", "A"]["n", "N"]["d", "D"] >
| < OR : ["o", "O"]["r", "R"] >
| < IF : ["i", "I"]["f", "F"] >
| < THEN : ["t", "T"]["h", "H"]["e", "E"]["n", "N"] >
| < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEP : "," >
| < END : ";" >
}

TOKEN : // identifier{
  < IDENTIFIER : ( ~["\"", " ", ".", ",", ":", "(", ")", "[", "]", "!", "|", "&", "-", "\t", "\r", "\n"] )+ >
}

ASTRoot Root() :
{}
{
  (Constraint())* < EOF >
  {
    return jjtThis;
  }
}

void Constraint() :
{}
{
  < IF > Condition() < THEN > Action() < END >
| Condition() < END >
}

void Condition() :
{}
{
  Or()
}

void Action() :
{}
{
  Or()
}

void Or() :
{}
{
  And() ( < OR > And() )*
}

void And() :
{}
{
  Unary() ( < AND > Unary() )*
}

void Unary() :
{}
{
  < LPAREN > Or() < RPAREN >
| Compare()
}

void Compare() :
{
  Token t;
}
{
  Parameter()
  ( t = < EQUAL > | t = < NOT_EQUAL> )
  {
    jjtThis.jjtSetValue(t.image);
  }
  Value()
}

void Parameter() :
{
  Token t;
}
{
  < LBRACKET>
  t = < IDENTIFIER >
  {
    jjtThis.jjtSetValue(t.image);
  }
  < RBRACKET >
}

void Value() :
{
  Token t;
}
{
  < QUOTATION_MARK >
  t = < IDENTIFIER >
  {
    jjtThis.jjtSetValue(t.image);
  }
  < QUOTATION_MARK >
}
