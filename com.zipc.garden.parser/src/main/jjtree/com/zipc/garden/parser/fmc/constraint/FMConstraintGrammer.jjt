options
{
  STATIC = false;
  UNICODE_INPUT = true;
  MULTI = true;
  VISITOR = true;
//  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(FMConstraintParser)
package com.zipc.garden.parser.fmc.constraint;

public class FMConstraintParser {
}

PARSER_END(FMConstraintParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : // quoted identifier
{
  < QUOTED_IDENTIFIER :
  	< QUOTATION_MARK > ( < ANY_UNICODE_CHARACTER > )* < QUOTATION_MARK >
  >
| < #QUOTATION_MARK : "\"" >
| < #ANY_UNICODE_CHARACTER : ~["\r", "\n", "\""] >
}

TOKEN : // operators{
  < NOT : "!" >
| < AND : "&&" >
| < OR : "||" >
| < IMPLIES : "->" >
| < MUTEX : "mutex" >
| < REMOVES : "removes" >
| < LPAREN : "(" >
| < RPAREN : ")" >
| < SEP : "," >
| < PARENT_SPEC: "." >
| < REFERENCE_SPEC: ":" >
}

TOKEN : // identifier{
  < IDENTIFIER : ( ~[" ", ".", ",", ":", "(", ")", "!", "|", "&", "-", "\t", "\r", "\n"] )+ >
}

ASTRoot Root() :
{}
{
  Expression() < EOF >
  {
    return jjtThis;
  }
}

void Expression() :
{}
{
  LOOKAHEAD( OrExpression() < REMOVES > ) OrExpression() < REMOVES > Node()
| ImpliesExpression()
}

void ImpliesExpression() :
{}
{
  OrExpression() [ < IMPLIES > OrExpression() ]
}

void OrExpression() :
{}
{
  AndExpression() ( < OR > AndExpression() )*
}

void AndExpression() :
{}
{
  UnaryExpression() ( < AND > UnaryExpression() )*
}

void UnaryExpression() :
{}
{
  < LPAREN > OrExpression() < RPAREN >
| MutexExpression()
| NotExpression()
| Node()
}

void MutexExpression() :
{}
{
  < MUTEX > < LPAREN > Node() ( < SEP > Node() )* < RPAREN >
}

void NotExpression() :
{}
{
  < NOT > UnaryExpression()
}

void Node() :
{
}
{
  ParentNode() ( < REFERENCE_SPEC > ParentNode() )*
}

void ParentNode() :
{}
{
  Identifier() ( < PARENT_SPEC > Identifier() )*
}

void Identifier() :
{
  Token t = null;
}
{
  ( t = < QUOTED_IDENTIFIER > | t = < IDENTIFIER > )
  {
    jjtThis.jjtSetValue(t.image);
  }
}
