options
{
  STATIC = false;
  UNICODE_INPUT = true;
  MULTI = true;
  VISITOR = true;
//  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(FSMConditionParser)
package com.zipc.garden.parser.fsm.condition;

public class FSMConditionParser {
}

PARSER_END(FSMConditionParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : // quoted identifier
{
  < QUOTED_IDENTIFIER :
  	< QUOTATION_MARK > ( < ANY_UNICODE_CHARACTER > )* < QUOTATION_MARK >
  >
| < #QUOTATION_MARK : "\"" >
| < #ANY_UNICODE_CHARACTER : ~["\r", "\n", "\""] >
}

TOKEN : // operators{
  < OR : "||" >
| < AND : "&&" >
| < EQUAL : "==" >
| < NOT_EQUAL : "!=" >
| < NOT : "!" >
| < LPAREN : "(" >
| < RPAREN : ")" >
}

TOKEN : // identifier
{
  < IDENTIFIER : ( ~["\"", " ", ".", ",", ":", "(", ")", "!", "|", "&", "-", "\t", "\r", "\n"] )+ >
}

ASTFSMCondition parse() #FSMCondition:
{}
{
  FSMExpression() < EOF >
  {
    return jjtThis;
  }
}

void FSMExpression() #void:
{}
{
  FSMOrExpression()
}

void FSMOrExpression() :
{}
{
  FSMAndExpression() ( < OR > FSMAndExpression() )*
}

void FSMAndExpression() :
{}
{
  FSMEqualityExpression() ( < AND > FSMEqualityExpression() )*
}

void FSMEqualityExpression() #void:
{}
{
  FSMUnaryExpression() ( 
    < NOT_EQUAL > FSMUnaryExpression() #FSMNotEqualExpression(2)
    | < EQUAL > FSMUnaryExpression() #FSMEqualExpression(2) 
  )*
}

void FSMUnaryExpression() #void:
{}
{
  FSMNotExpression()
  | Node()
  | FSMParenthesizedExpression()
}

void FSMNotExpression() :
{}
{
  < NOT > FSMUnaryExpression()
}

void FSMParenthesizedExpression() #void:
{}
{
  < LPAREN > FSMExpression() < RPAREN >
}

void Node() #void:
{}
{
  FSMStringValueExpression()
  | FSMVariableReferenceValueExpression()
}

void FSMStringValueExpression() :
{
  Token t = null;
}
{
  t = < QUOTED_IDENTIFIER >
  {
    jjtThis.jjtSetValue(t.image);
  }
}

void FSMVariableReferenceValueExpression() :
{
  Token t = null;
}
{
  t = < IDENTIFIER >
  {
    jjtThis.jjtSetValue(t.image);
  }
}
