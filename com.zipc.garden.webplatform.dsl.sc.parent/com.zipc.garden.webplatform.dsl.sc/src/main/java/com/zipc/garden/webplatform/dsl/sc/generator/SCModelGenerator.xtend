/*
 * generated by Xtext 2.17.0
 */
package com.zipc.garden.webplatform.dsl.sc.generator

import com.zipc.garden.webplatform.dsl.sc.sCModel.AbstractRoutes
import com.zipc.garden.webplatform.dsl.sc.sCModel.ConnectionType
import com.zipc.garden.webplatform.dsl.sc.sCModel.EgoCar
import com.zipc.garden.webplatform.dsl.sc.sCModel.Goal
import com.zipc.garden.webplatform.dsl.sc.sCModel.Junction
import com.zipc.garden.webplatform.dsl.sc.sCModel.JunctionEntry
import com.zipc.garden.webplatform.dsl.sc.sCModel.Lane
import com.zipc.garden.webplatform.dsl.sc.sCModel.Mid
import com.zipc.garden.webplatform.dsl.sc.sCModel.Object
import com.zipc.garden.webplatform.dsl.sc.sCModel.Point
import com.zipc.garden.webplatform.dsl.sc.sCModel.Road
import com.zipc.garden.webplatform.dsl.sc.sCModel.Routes
import com.zipc.garden.webplatform.dsl.sc.sCModel.RoutesEntity
import com.zipc.garden.webplatform.dsl.sc.sCModel.SCRoot
import com.zipc.garden.webplatform.dsl.sc.sCModel.Scenario
import com.zipc.garden.webplatform.dsl.sc.sCModel.Start
import com.zipc.garden.webplatform.dsl.sc.sCModel.Trajectory
import com.zipc.garden.webplatform.dsl.sc.sCModel.WayPoint
import java.util.HashSet
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.linking.lazy.LazyLinkingResource

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SCModelGenerator extends AbstractGenerator {

	HashSet<Road> outputedRoads;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val dataBuilder = new StringBuilder();
		outputedRoads = new HashSet<Road>();
		if(resource instanceof LazyLinkingResource) {
			val scRoot = resource.allContents.filter(SCRoot).toList;
			if(!scRoot.empty) {
				dataBuilder.append(scRoot.get(0).compile);
			}

			fsa.generateFile('scmodelgenerator.json', dataBuilder.toString.trim);
		}
	}

	def compile(SCRoot obj) '''
		«FOR scenario : obj.scenarios»
			«scenario.compile»
		«ENDFOR»
	'''

	def compile(Scenario obj) '''
		{
			"Scenario": {
				"id": "«obj.id»",
				"direction": "«obj.direction.getName»",
				"roads": [
					null
					«FOR road : obj.roads»
						«IF road.connection !== null && !road.connection.eIsProxy && road.connection.id !== null && !road.connection.id.isEmpty»
							«IF road.connection instanceof Road»
								«(road.connection as Road).compile»
							«ELSEIF road.connection instanceof Lane»
								«(road.connection.eContainer as Road).compile»
							«ENDIF»
						«ENDIF»
						«road.compile»
					«ENDFOR»
				],
				"junctions": [
					«FOR junction : obj.junctions»
						«junction.compile»«IF obj.junctions.indexOf(junction) === obj.junctions.size - 1»«ELSE»,«ENDIF»
					«ENDFOR»
				],
				«IF obj.egoCar !== null»
					"egoCar": «obj.egoCar.compile»,
				«ENDIF»
				"objects": [
					«FOR object : obj.objects»
						«object.compile»«IF obj.objects.indexOf(object) === obj.objects.size - 1»«ELSE»,«ENDIF»
					«ENDFOR»
				],
				"trajectories": [
					«FOR trajectory : obj.trajectories»
						«trajectory.compile»«IF obj.objects.indexOf(trajectory) === obj.objects.size - 1»«ELSE»,«ENDIF»
					«ENDFOR»
				]
			}
		}
	'''

	def compile(Road obj) '''
		«IF outputedRoads.add(obj)»
			, {
				"id":"«obj.id»",
				"priorityRoad":«obj.priorityRoad»,
				«IF obj.point !== null»
					"point":{ "x": «obj.point.x», "y": «obj.point.y», "z": «obj.point.z», "roll": «obj.point.roll», "yaw": «obj.point.yaw», "pitch": «obj.point.pitch» },
				«ENDIF»
				"type":"«obj.type.getName»",
				"length":«obj.length»,
				"height":«obj.height ?: 0.0»,
				"ramp_angle":«obj.rampAngle ?: 0.0»,
				«IF obj.connection !== null && !obj.connection.eIsProxy && obj.connection.id !== null && !obj.connection.id.isEmpty»
					"connection":"«obj.connection.id»",
				«ENDIF»
				"reverse":«IF obj.connectionType === ConnectionType.PREDECESSOR»true«ELSE»false«ENDIF»,
				"radius":«obj.radius ?: 0.0»,
				"start_radius":«obj.start_radius ?: 0.0»,
				"end_radius":«obj.end_radius ?: 0.0»,
				"lanes":[
					«FOR lane : obj.lanes»
						«lane.compile»«IF obj.lanes.indexOf(lane) === obj.lanes.size - 1»«ELSE»,«ENDIF»
					«ENDFOR»
				]
			}
		«ENDIF»
	'''

	def compile(Lane obj) '''
		{
			"id":"«obj.id»",
			"type":"«obj.type.getName»",
			"position":"«obj.position.getName»",
			"width":«obj.width ?: 0.0»
		}
	'''

	def compile(Junction obj) '''
		{
			"id":"«obj.id»",
			"connections":[
				«FOR entry : obj.entries»
					«IF entry.connection !== null && !entry.connection.eIsProxy && entry.connection.id !== null && !entry.connection.id.isEmpty»
						«entry.compile»«IF obj.entries.indexOf(entry) === obj.entries.size - 1»«ELSE»,«ENDIF»
					«ENDIF»
				«ENDFOR»
			]
		}
	'''

	def compile(JunctionEntry obj) '''
		{
			"id":"«obj.connection.id»",
			"type":"«obj.connectionType.getName»"
		}
	'''

	def compile(EgoCar obj) '''
		{
			«IF obj.model !== null && !obj.model.eIsProxy && obj.model.id !== null && !obj.model.id.isEmpty»
				"model": "«obj.model.id»",
			«ENDIF»
			"routes": [
				«FOR route : obj.routes»
					«route.compile»«IF obj.routes.indexOf(route) === obj.routes.size - 1»«ELSE»,«ENDIF»
				«ENDFOR»
			]
		}
	'''

	def compile(Object obj) '''
		{
			"id":"«obj.id»",
			«IF obj.model !== null && !obj.model.eIsProxy && obj.model.id !== null && !obj.model.id.isEmpty»
				"model": "«obj.model.id»",
			«ENDIF»
			"routes": [
				«FOR route : obj.routes»
					«route.compile»«IF obj.routes.indexOf(route) === obj.routes.size - 1»«ELSE»,«ENDIF»
				«ENDFOR»
			]
		}
	'''

	def compile(Trajectory obj) '''
		{
			"id":"«obj.id»",
			"routes": [
				«FOR entity : obj.routes»
					«entity.compile»«IF obj.routes.indexOf(entity) === obj.routes.size - 1»«ELSE»,«ENDIF»
				«ENDFOR»
			],
			"mode": «IF obj.mode !== null»«obj.mode.compile»«ELSE»null«ENDIF»,
			"average": «IF obj.average !== null»«obj.average.compile»«ELSE»null«ENDIF»,
			"edge": «IF obj.edge !== null»«obj.edge.compile»«ELSE»null«ENDIF»
		}
	'''

	def compile(AbstractRoutes obj) '''
		«IF obj instanceof Routes»
			«obj.compile»
		«ELSEIF obj instanceof WayPoint»
			«obj.compile»
		«ENDIF»
	'''

	def compile(WayPoint obj) '''
		{
			«IF obj.accel !== null && !obj.accel.eIsProxy && obj.accel.id !== null && !obj.accel.id.isEmpty»
				"accel":«obj.accel.id»,
			«ELSE»
				"accel":0.0,
			«ENDIF»
			"points": [
				«FOR point : obj.points»
					«point.compile»«IF obj.points.indexOf(point) === obj.points.size - 1»«ELSE»,«ENDIF»
				«ENDFOR»
			]
		}
	'''

	def compile(Point obj) '''
		{
			"x":«obj.x», "y":«obj.y», "z":«obj.z»,
			"roll":«obj.roll», "pitch":«obj.pitch», "yaw":«obj.yaw»
		}
	'''

	def compile(Routes obj) '''
		{
			«IF obj.accel !== null && !obj.accel.eIsProxy && obj.accel.id !== null && !obj.accel.id.isEmpty»
				"accel":«obj.accel.id»,
			«ELSE»
				"accel":0.0,
			«ENDIF»
			"entities": [
				«FOR entity : obj.entities»
					«entity.compile»«IF obj.entities.indexOf(entity) === obj.entities.size - 1»«ELSE»,«ENDIF»
				«ENDFOR»
			]
		}
	'''

	def compile(RoutesEntity obj) '''
		«IF obj instanceof Start»
			«obj.compile»
		«ELSEIF obj instanceof Mid»
			«obj.compile»
		«ELSEIF obj instanceof Goal»
			«obj.compile»
		«ENDIF»
	'''

	def compile(Start obj) '''
		{
			"type":"start",
			«IF obj.lane !== null && !obj.lane.eIsProxy && obj.lane.id !== null && !obj.lane.id.isEmpty»
				"lane":"«obj.lane.id»",
			«ENDIF»
			«IF obj.shift !== null && !obj.shift.eIsProxy && obj.shift.id !== null && !obj.shift.id.isEmpty»
				"shift":«obj.shift.id»,
			«ELSE»
				"shift":-1,
			«ENDIF»
			"lanechange_start":«obj.lanechange_start?: -1»,
			"lanechange_end":«obj.lanechange_end?: -1»,
			«IF obj.velocity !== null && !obj.velocity.eIsProxy && obj.velocity.id !== null && !obj.velocity.id.isEmpty»
				"velocity":«obj.velocity.id»
			«ELSE»
				"velocity":0.0
			«ENDIF»
		}
	'''

	def compile(Mid obj) '''
		{
			"type":"mid",
			«IF obj.lane !== null && !obj.lane.eIsProxy && obj.lane.id !== null && !obj.lane.id.isEmpty»
				"lane":"«obj.lane.id»",
			«ENDIF»
			"lanechange_start":«obj.lanechange_start?: -1»,
			"lanechange_end":«obj.lanechange_end?: -1»,
			«IF obj.velocity !== null && !obj.velocity.eIsProxy && obj.velocity.id !== null && !obj.velocity.id.isEmpty»
				"velocity":«obj.velocity.id»
			«ELSE»
				"velocity":0.0
			«ENDIF»
		}
	'''

	def compile(Goal obj) '''
		{
			"type":"goal",
			«IF obj.lane !== null && !obj.lane.eIsProxy && obj.lane.id !== null && !obj.lane.id.isEmpty»
				"lane":"«obj.lane.id»",
			«ENDIF»
			«IF obj.shift !== null && !obj.shift.eIsProxy && obj.shift.id !== null && !obj.shift.id.isEmpty»
				"shift":«obj.shift.id»,
			«ELSE»
				"shift":-1,
			«ENDIF»
			"lanechange_start":«obj.lanechange_start?: -1»,
			"lanechange_end":«obj.lanechange_end?: -1»,
			«IF obj.velocity !== null && !obj.velocity.eIsProxy && obj.velocity.id !== null && !obj.velocity.id.isEmpty»
				"velocity":«obj.velocity.id»
			«ELSE»
				"velocity":0.0
			«ENDIF»
		}
	'''
}
