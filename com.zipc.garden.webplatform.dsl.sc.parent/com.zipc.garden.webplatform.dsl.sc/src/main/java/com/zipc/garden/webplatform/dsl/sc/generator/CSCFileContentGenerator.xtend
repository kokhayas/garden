/*
 * generated by Xtext 2.17.0
 */
package com.zipc.garden.webplatform.dsl.sc.generator

import com.zipc.garden.webplatform.dsl.sc.sCModel.AbstractRoutes
import com.zipc.garden.webplatform.dsl.sc.sCModel.Bike
import com.zipc.garden.webplatform.dsl.sc.sCModel.Car
import com.zipc.garden.webplatform.dsl.sc.sCModel.ConnectionType
import com.zipc.garden.webplatform.dsl.sc.sCModel.EgoCar
import com.zipc.garden.webplatform.dsl.sc.sCModel.EnvObject
import com.zipc.garden.webplatform.dsl.sc.sCModel.EnvObjectDef
import com.zipc.garden.webplatform.dsl.sc.sCModel.Environment
import com.zipc.garden.webplatform.dsl.sc.sCModel.Goal
import com.zipc.garden.webplatform.dsl.sc.sCModel.Junction
import com.zipc.garden.webplatform.dsl.sc.sCModel.JunctionEntry
import com.zipc.garden.webplatform.dsl.sc.sCModel.Lane
import com.zipc.garden.webplatform.dsl.sc.sCModel.Mid
import com.zipc.garden.webplatform.dsl.sc.sCModel.Model
import com.zipc.garden.webplatform.dsl.sc.sCModel.ModelEntity
import com.zipc.garden.webplatform.dsl.sc.sCModel.Object
import com.zipc.garden.webplatform.dsl.sc.sCModel.Point
import com.zipc.garden.webplatform.dsl.sc.sCModel.Range
import com.zipc.garden.webplatform.dsl.sc.sCModel.Road
import com.zipc.garden.webplatform.dsl.sc.sCModel.Routes
import com.zipc.garden.webplatform.dsl.sc.sCModel.RoutesEntity
import com.zipc.garden.webplatform.dsl.sc.sCModel.SCRoot
import com.zipc.garden.webplatform.dsl.sc.sCModel.Scenario
import com.zipc.garden.webplatform.dsl.sc.sCModel.Start
import com.zipc.garden.webplatform.dsl.sc.sCModel.WayPoint
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.linking.lazy.LazyLinkingResource

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CSCFileContentGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val dataBuilder = new StringBuilder();
		if(resource instanceof LazyLinkingResource) {
			val scRoot = resource.allContents.filter(SCRoot).toList;
			if(!scRoot.empty) {
				dataBuilder.append(scRoot.get(0).compile);
			}

			println(dataBuilder.toString);
			fsa.generateFile('cscFileContentGenerator.json', dataBuilder.toString.trim);
		}
	}

	def compile(SCRoot obj) '''
		«FOR scenario : obj.scenarios»
			«scenario.compile»
		«ENDFOR»
	'''

	def compile(Scenario obj) '''
		Scenario «obj.id» {
			direction: «obj.direction.getName»
			«FOR road : obj.roads»
				«road.compile»
			«ENDFOR»
			«IF obj.egoCar !== null»
				«obj.egoCar.compile»
			«ENDIF»
			«FOR object : obj.objects»
				«object.compile»
			«ENDFOR»
			«IF obj.model !== null»
				«obj.model.compile»
			«ENDIF»
			«FOR r : obj.range»
				«r.compile»
			«ENDFOR»
			«FOR eObj : obj.envObjects»
				«eObj.compile»
			«ENDFOR»
			«FOR eObjDef : obj.envObjectDefs»
				«eObjDef.compile»
			«ENDFOR»
			«FOR junction : obj.junctions»
				«junction.compile»
			«ENDFOR»
			«IF obj.environment !== null»
				«obj.environment.compile»
			«ENDIF»
		}
	'''

	def compile(Road obj) '''
		Road «obj.id» {
			type      : «obj.type.getName»
			«IF obj.point !== null»
				«obj.point.compile»
			«ENDIF»
			length    : «obj.length»
			«IF obj.height !== null»
				height    : «obj.height»
			«ENDIF»
			«IF obj.rampAngle !== null»
				ramp_angle: «obj.rampAngle»
			«ENDIF»
			«IF obj.connection !== null && !obj.connection.eIsProxy && obj.connection.id !== null && !obj.connection.id.isEmpty»
				connection: «obj.connection.id» «IF obj.connectionType === ConnectionType.PREDECESSOR»predecessor«ELSE»successor«ENDIF»
			«ENDIF»
			«IF obj.radius !== null»
				radius    : «obj.radius»
			«ENDIF»
			«IF obj.start_radius !== null»
				start_radius    : «obj.start_radius»
			«ENDIF»
			«IF obj.end_radius !== null»
				end_radius    : «obj.end_radius»
			«ENDIF»
			«FOR lane : obj.lanes»
				«lane.compile»
			«ENDFOR»
		}
	'''

	def compile(Lane obj) '''
		Lane «obj.id» {
			type    : «obj.type.getName»
			position: «obj.position.getName»
			«IF obj.width !== null»
				width   : «obj.width»
			«ENDIF»
		}
	'''

	def compile(EgoCar obj) '''
		EgoCar {
			«IF obj.model !== null && !obj.model.eIsProxy && obj.model.id !== null && !obj.model.id.isEmpty»
				model: «obj.model.id»
			«ENDIF»
			«FOR route : obj.routes»
				«route.compile»
			«ENDFOR»
		}
	'''

	def compile(Object obj) '''
		Object «obj.id» {
			«IF obj.model !== null && !obj.model.eIsProxy && obj.model.id !== null && !obj.model.id.isEmpty»
				model: «obj.model.id»
			«ENDIF»
			«FOR route : obj.routes»
				«route.compile»
			«ENDFOR»
		}
	'''

	def compile(AbstractRoutes obj) '''
		«IF obj instanceof Routes»
			«obj.compile»
		«ELSEIF obj instanceof WayPoint»
			«obj.compile»
		«ENDIF»
	'''

	def compile(Routes obj) '''
		Routes {
			«IF obj.accel !== null && !obj.accel.eIsProxy && obj.accel.id !== null && !obj.accel.id.isEmpty»
				accel           : «obj.accel.id»
			«ENDIF»
			«FOR entity : obj.entities»
				«entity.compile»
			«ENDFOR»
		}
	'''

	def compile(WayPoint obj) '''
		WayPoint {
			«IF obj.accel !== null && !obj.accel.eIsProxy && obj.accel.id !== null && !obj.accel.id.isEmpty»
				accel           : «obj.accel.id»
			«ENDIF»
			«FOR point : obj.points»
				«point.compile»
			«ENDFOR»
		}
	'''

	def compile(RoutesEntity obj) '''
		«IF obj instanceof Start»
			«obj.compile»
		«ELSEIF obj instanceof Mid»
			«obj.compile»
		«ELSEIF obj instanceof Goal»
			«obj.compile»
		«ENDIF»
	'''

	def compile(Start obj) '''
		Start {
			«IF obj.lane !== null && !obj.lane.eIsProxy && obj.lane.id !== null && !obj.lane.id.isEmpty»
				lane            : «obj.lane.id»
			«ENDIF»
			«IF obj.shift !== null && !obj.shift.eIsProxy && obj.shift.id !== null && !obj.shift.id.isEmpty»
				shift           : «obj.shift.id»
			«ENDIF»
			«IF obj.lanechange_start !== null»
				lanechange_start: «obj.lanechange_start»
			«ENDIF»
			«IF obj.lanechange_end !== null»
				lanechange_end  : «obj.lanechange_end»
			«ENDIF»
			«IF obj.velocity !== null && !obj.velocity.eIsProxy && obj.velocity.id !== null && !obj.velocity.id.isEmpty»
				velocity        : «obj.velocity.id»
			«ENDIF»
		}
	'''

	def compile(Mid obj) '''
		Mid {
			«IF obj.lane !== null && !obj.lane.eIsProxy && obj.lane.id !== null && !obj.lane.id.isEmpty»
				lane            : «obj.lane.id»
			«ENDIF»
			«IF obj.lanechange_start !== null»
				lanechange_start: «obj.lanechange_start»
			«ENDIF»
			«IF obj.lanechange_end !== null»
				lanechange_end  : «obj.lanechange_end»
			«ENDIF»
			«IF obj.velocity !== null && !obj.velocity.eIsProxy && obj.velocity.id !== null && !obj.velocity.id.isEmpty»
				velocity        : «obj.velocity.id»
			«ENDIF»
		}
	'''

	def compile(Goal obj) '''
		Goal {
			«IF obj.lane !== null && !obj.lane.eIsProxy && obj.lane.id !== null && !obj.lane.id.isEmpty»
				lane            : «obj.lane.id»
			«ENDIF»
			«IF obj.shift !== null && !obj.shift.eIsProxy && obj.shift.id !== null && !obj.shift.id.isEmpty»
				shift           : «obj.shift.id»
			«ENDIF»
			«IF obj.lanechange_start !== null»
				lanechange_start: «obj.lanechange_start»
			«ENDIF»
			«IF obj.lanechange_end !== null»
				lanechange_end  : «obj.lanechange_end»
			«ENDIF»
			«IF obj.velocity !== null && !obj.velocity.eIsProxy && obj.velocity.id !== null && !obj.velocity.id.isEmpty»
				velocity        : «obj.velocity.id»
			«ENDIF»
		}
	'''

	def compile(Model obj) '''
		Model {
			«FOR element : obj.elements»
				«element.compile»
			«ENDFOR»
		}
	'''

	def compile(ModelEntity obj) '''
		«IF obj instanceof Car»
			«obj.compile»
		«ELSEIF obj instanceof Bike»
			«obj.compile»
		«ENDIF»
	'''

	def compile(Car obj) '''
		Car «obj.id» {
			«IF obj.width !== null»
				width    : «obj.width»
			«ENDIF»
			«IF obj.height !== null»
				height   : «obj.height»
			«ENDIF»
			«IF obj.length !== null»
				length   : «obj.length»
			«ENDIF»
			«IF obj.wheelbase !== null»
				wheelbase: «obj.wheelbase»
			«ENDIF»
		}
	'''

	def compile(Bike obj) '''
		Bike «obj.id» {
			«IF obj.width !== null»
				width    : «obj.width»
			«ENDIF»
			«IF obj.height !== null»
				height   : «obj.height»
			«ENDIF»
			«IF obj.length !== null»
				length   : «obj.length»
			«ENDIF»
			«IF obj.wheelbase !== null»
				wheelbase: «obj.wheelbase»
			«ENDIF»
		}
	'''

	def compile(Range obj) '''
		Range «obj.id» {
			«IF obj.min !== null»
				min    : «obj.min»
			«ENDIF»
			«IF obj.max !== null»
				max    : «obj.max»
			«ENDIF»
			«IF obj.average !== null»
				average: «obj.average»
			«ENDIF»
			«IF obj.mode !== null»
				mode   : «obj.mode»
			«ENDIF»
			«IF obj.median !== null»
				median : «obj.median»
			«ENDIF»
			value  : «obj.value.compile»
		}
	'''

	def compile(EnvObject obj) '''
		EnvObject {
			«IF obj.width !== null»
				type      : «obj.type»
			«ENDIF»
			«IF obj.width !== null»
				width     : «obj.width»
			«ENDIF»
			«IF obj.height !== null»
				height    : «obj.height»
			«ENDIF»
			«IF obj.road !== null && !obj.road.eIsProxy && obj.road.id !== null && !obj.road.id.isEmpty»
				road: «obj.road.id»
			«ENDIF»
			«IF obj.lane !== null && !obj.lane.eIsProxy && obj.lane.id !== null && !obj.lane.id.isEmpty»
				lane: «obj.lane.id»
			«ENDIF»
			«FOR point : obj.points»
				«point.compile»
			«ENDFOR»
		}
	'''

	def compile(Environment obj) '''
		Environment {
			«IF obj.time_of_day !== null»
				time_of_day    : "«obj.time_of_day»"
			«ENDIF»
			«IF obj.light_intensity !== null»
				light_intensity: «obj.light_intensity»
			«ENDIF»
			«IF obj.height_angle !== null»
				height_angle   : «obj.height_angle»
			«ENDIF»
			«IF obj.cloud_density !== null»
				cloud_density  : «obj.cloud_density»
			«ENDIF»
			«IF obj.rain_density !== null»
				rain_density   : «obj.rain_density»
			«ENDIF»
			«IF obj.fog_density !== null»
				fog_density    : «obj.fog_density»
			«ENDIF»
			«IF obj.snow_density !== null»
				snow_density   : «obj.snow_density»
			«ENDIF»
		}
	'''

	def compile(EList<Double> values) '''
		«IF values.size === 1»
			«values.get(0)»
		«ELSE»
			«values.toString»
		«ENDIF»
	'''

	def compile(Point obj) '''
		Point {
			x: «obj.x» y: «obj.y» z: «obj.z»
			roll: «obj.roll» pitch: «obj.pitch» yaw: «obj.yaw»
		}
	'''

	def compile(EnvObjectDef obj) '''
		EnvObjectDef {
			«FOR defType : obj.defTypes»
				«defType»
			«ENDFOR»
		}
	'''

	def compile(Junction obj) '''
		Junction «obj.id» {
			«FOR entry : obj.entries»
				«entry.compile»
			«ENDFOR»
		}
	'''

	def compile(JunctionEntry obj) '''
		«IF obj.connection !== null && !obj.connection.eIsProxy && obj.connection.id !== null && !obj.connection.id.isEmpty»
			«obj.connection.id» <«obj.connectionType.getName»>
		«ENDIF»
	'''
}
