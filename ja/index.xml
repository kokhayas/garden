<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GARDEN ScenarioPlatform on ja</title>
    <link>https://open-garden.github.io/garden/ja/</link>
    <description>Recent content in GARDEN ScenarioPlatform on ja</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>js</language>
    <lastBuildDate>Thu, 07 Jan 2021 10:03:13 +0900</lastBuildDate><atom:link href="https://open-garden.github.io/garden/ja/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ビルド手順</title>
      <link>https://open-garden.github.io/garden/ja/scenarioexecutor/page1/</link>
      <pubDate>Wed, 25 Aug 2021 10:56:04 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/scenarioexecutor/page1/</guid>
      <description>ScenarioExecutor ScenarioExecutorは自動運転アルゴリズムのテストを行うためのシナリオ実行エンジンです。
本リポジトリにはCARLAとAutowareを使用し、実際にシナリオを実行しテストを行うデモ環境が含まれています。
動作環境  Ubuntu 18.04 CARLA Simulator 0.9.11 ROS/ROS2 bridge for CARLA simulator 0.9.11 ROS Melodic Autoware 1.14.0  CARLAのビルド 下記サイトを参照しCARLA 0.9.11のビルドを行ってください。
https://carla.readthedocs.io/en/0.9.11/build_linux/
インストール手順の最後にある、以下のコマンドは必須ですので、必ず実行してください。
make PythonAPI ARGS=&amp;quot;--python-version=2&amp;quot;ros-bridgeのインストール cd ~git clone https://github.com/carla-simulator/ros-bridge.gitcd ros-bridge./install_dependencies.shCARLAのバージョンに対応したros-bridgeをcloneしてください。
https://github.com/carla-simulator/ros-bridge
2021年8月現在、CARLA 0.9.11に対応するros-bridgeはリリースされていませんので、masterをcloneしてください。
ROS Melodicのインストール 下記サイト等を参照しROS Melodicのインストールを行ってください。
http://wiki.ros.org/melodic/Installation/Ubuntu
Autowareのビルド 下記サイトを参照しAutoware 1.14.0のビルドを行ってください。
https://gitlab.com/autowarefoundation/autoware.ai/autoware/-/wikis/Source-Build
ScenarioExecutorのダウンロード 以下のコマンドを実行してください。
cd ~git clone https://github.com/open-garden/garden-scenarioexecutor.gitデモ実行 ScenarioExecutorには簡単にシナリオ実行のデモを行うためのシェルスクリプトやROSのlaunchファイルがあらかじめ含まれています。
これらのファイルは各アプリケーションが以下のフォルダにインストールされていることを前提にしています。    アプリケーション フォルダ     CARLA ~/carla   ros-bridge ~/ros-bridge   Autoware ~/autoware.</description>
    </item>
    
    <item>
      <title>ビルド手順</title>
      <link>https://open-garden.github.io/garden/ja/scenarioroadeditor/page1/</link>
      <pubDate>Wed, 25 Aug 2021 10:56:04 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/scenarioroadeditor/page1/</guid>
      <description>ビルド手順はBuild &amp;amp; Installを参照してください。</description>
    </item>
    
    <item>
      <title>PostgreSQL</title>
      <link>https://open-garden.github.io/garden/ja/build/tools/postgresql/</link>
      <pubDate>Mon, 21 Jun 2021 11:10:34 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/build/tools/postgresql/</guid>
      <description>認証キーの追加をします。
sudo curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -リポジトリの追加をします。
lsb_release -csudo sh -c &#39;echo &amp;quot;deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main&amp;quot; &amp;gt; /etc/apt/sources.list.d/pgdg.list&#39;PostgreSQL をインストールします。
sudo apt updatesudo apt install postgresql-11.pgpassファイルの設定をします。
データベースに接続するとき、psqlは強制的にパスワード入力を促しますので、パスワードの入力省略するため、事前に.pgpassファイルを作成します。
garden-userに切り替えます
sudo su - garden-user.pgpassファイルを編集します。
vi ~/.pgpass.pgpassファイルの内容は以下の通りです。
# データベースgardenの接続情報localhost:5432:garden:postgres:postgres# データベースairflowの接続情報localhost:5432:airflow:postgres:postgres.pgpassファイルの権限を変更します。
chmod 600 ~/.pgpass外部接続許可設定（オプション）
外部から接続するため、接続許可の設定をします。
postgresql.conf を編集します。
sudo vi /etc/postgresql/11/main/postgresql.conf57行目【# - Connection Settings -】の付近、listen_addresses = &amp;lsquo;*&amp;rsquo; を追加し、すべての通信を受け入れます。
# - Connection Settings -#listen_addresses = &#39;localhost&#39; # what IP address(es) to listen on;listen_addresses = &#39;*&#39;pg_hba.</description>
    </item>
    
    <item>
      <title>ユーザー作成</title>
      <link>https://open-garden.github.io/garden/ja/build/createuser/</link>
      <pubDate>Mon, 21 Jun 2021 10:56:04 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/build/createuser/</guid>
      <description>Ubuntu 18.04 上にユーザーを作成します。ホームディレクトリを /home/garden-user に指定して、ユーザーを作成します。
sudo useradd -s /bin/bash -m -d /home/garden-user -c &amp;quot;GARDEN user&amp;quot; garden-userパスワードを &amp;ldquo;garden&amp;rdquo; に設定します。
sudo passwd garden-usergarden-user に sudo の権限を与えます。
sudo usermod -aG sudo garden-userアプリ配置ディレクトリを作成します。 garden-user に切り替えます。
sudo su - garden-usergarden-user のhomeディレクトリの直下に下記のようなフォルダを作成します。
mkdir -p {etc/{airflow/{dags,data},fuseki,tomcat},garden/{war,dags,script,job_executor,node_services},tmp}/home/garden-user/├── etc│ ├── airflow│ ├── dags│ └── data│ ├── fuseki│ └── tomcat├── garden│ ├── war│ ├── dags│ ├── script│ ├── job_executor│ └── node_services├── tmp└── .</description>
    </item>
    
    <item>
      <title>Mapの作成手順</title>
      <link>https://open-garden.github.io/garden/ja/scenarioroadeditor/page2/</link>
      <pubDate>Wed, 25 Aug 2021 10:56:04 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/scenarioroadeditor/page2/</guid>
      <description>Mapの保存と読込 ScenarioRoadEditorを表示して、メニューからFile &amp;gt; Saveでローカル環境にjson形式で保存ができます。
保存したMapファイルをScenarioRoadEditorで開く場合は、メニューからFile &amp;gt; Openでローカル環境のjson形式のファイルを開くことができます。
Mapの作成手順 Mapの作成手順の詳細は以下の動画を参照してください。※交差点の作成方法については以下に補足があります。
  道路の方向について 道路には方向があり、道路を選択した際に、道路の移動や回転を編集できるハンドルが表示される側が、道路の開始側となります。交差点を作成する際には、接続する道路の方向を調べて道路の開始側（predecessor）か終了側（successor）のどちらを接続するかを指定します。
交差点作成時の道路の接続順について 交差点に接続する道路は以下のように時計回りに接続する必要があります。 </description>
    </item>
    
    <item>
      <title>マップの追加</title>
      <link>https://open-garden.github.io/garden/ja/scenarioexecutor/page2/</link>
      <pubDate>Wed, 25 Aug 2021 10:56:04 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/scenarioexecutor/page2/</guid>
      <description>以下の流れに沿ってCARLAにマップを追加します。
詳細な手順を以降に記載します。 道路のメッシュの作成 RoadEditorを使用し地図を作成してください。
作成したらFile &amp;gt; Export OBJでエクスポートしてください。
ルートの定義 RoadEditorで自車両及び他車両が走行するルートを定義してください。
定義したらFile &amp;gt; Export Waypointでエクスポートしてください。
OpenDriveの作成 RoadEditorのFile &amp;gt; Saveで出力したファイルから、OpenDrive変換ツールを使用しOpenDriveを作成してください。
Unreal Engineにマップを追加 RoadEditorからエクスポートしたobjファイルをそのままCARLAにインポートするとスケールと座標系が異なるため、事前に修正を行う必要があります。
ここではBlenderを使用した修正方法について記載します。
 Blenderを起動し、File &amp;gt; Import &amp;gt; Wavefront (.obj)を選択します。
RoadEditorからエクスポートしたobjファイルを選択しインポートします。 アスファルト部分のメッシュと白線部分のメッシュに分かれているため、アスファルト部分のみ選択します。
 File &amp;gt; Export &amp;gt; FBX (.fbx)を選択します。
Limit to Selected Objectsにチェックを入れます。
Object TypesはMeshのみ選択します。
Export FBXをクリックします。
 同様に白線部分もエクスポートします。
 CARLAにインポートします。
インポート先のフォルダで右クリックしImport to /Game/...を選択します。
Blenderからエクスポートしたfbxファイルを選択します。
そのままImport Allをクリックします。
 空のマップを用意します。
/Content/Carla/Maps/BaseMap/BaseMapを/Content/Garden/Mapsにドラッグアンドドロップし、Copy Hereを選択します。
マップの名前を変更しRoadEditorのIDを付けます。
マップの名前はOpenDriveのファイル名とも一致している必要があります。 空のマップを開き、道路のメッシュを配置します。
LocationとRotationはすべて0にしてください。 ScenarioExecutorのBlueprintを配置します。
/Content/Garden/Blueprints/ScenarioExecutor/Garden_ScenarioExecutorをマップ上にドラッグアンドドロップして配置します。  OpenDriveを格納します。
~/ScenarioExecutor/Content/Garden/Maps/OpenDriveにマップと同名のOpenDriveを格納します。  ウェイポイントの格納  ウェイポイントを格納します。</description>
    </item>
    
    <item>
      <title>Java</title>
      <link>https://open-garden.github.io/garden/ja/build/tools/java/</link>
      <pubDate>Mon, 21 Jun 2021 11:19:40 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/build/tools/java/</guid>
      <description>OpenJDK Amazon Corretto 8 をインストールします。
java-common パッケージをインストールします。
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install java-common=0.68ubuntu1~18.04.1Linux .deb ファイルをダウンロードして、インストールします。
cd ~/tmpwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.debsudo apt install ./amazon-corretto-8-x64-linux-jdk.debjavaバージョンを確認します。
java -version以下のように表示されます。
openjdk version &amp;quot;1.8.0_292&amp;quot;OpenJDK Runtime Environment Corretto-8.292.10.1 (build 1.8.0_292-b10)OpenJDK 64-Bit Server VM Corretto-8.292.10.1 (build 25.292-b10, mixed mode)</description>
    </item>
    
    <item>
      <title>シナリオの記述方法</title>
      <link>https://open-garden.github.io/garden/ja/scenarioexecutor/page3/</link>
      <pubDate>Wed, 25 Aug 2021 10:56:04 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/scenarioexecutor/page3/</guid>
      <description>シナリオの記述方法について解説します。
シナリオはjson形式で記述します。
サンプルのシナリオファイルが~/ScenarioExecutor/scenariosフォルダ内にありますので、参考にしてください。
シナリオの記述内容は大きく4つのブロックに分かれています。    ブロック 記述内容     map_id RoadEditorのIDを指定します。   actors シナリオに登場する自車両、他車両、歩行者、障害物の情報を記述します。   scenario さまざまなシーンを定義し、シーン中にアクターがどのように振舞うか、シーン間をどのような条件で遷移するかを記述します。   stop_condition シナリオの終了条件を記述します。      map_id
RoadEditorのIDを指定します。
&amp;#34;map_id&amp;#34;: &amp;#34;highway&amp;#34;   actors
シナリオ内に登場するアクターを定義します。
 ego
自車両を定義します。  actor_id (int)
アクターのIDを指定します。アクターが複数存在する場合、重複しない値を指定します。 model_id (string)
車種のIDを指定します。CARLAで定義されている車種のIDを指定します。
現在、シナリオから自車両の車種を指定することはできません。ros-bridge 0.9.11ではros-bridge/carla_spawn_objects/config/objects.json内で自車両の車種を指定します。 color (string)
車両の色を指定します(RGB16進数)。
現在、シナリオから自車両の色を指定することはできません。ros-bridgeの仕様でランダムになっています。   others
他車両、歩行者等の障害物を定義します。   actor_id (int) - egoのactor_idと同じです。
  model_id (string)</description>
    </item>
    
    <item>
      <title>ルートの作成手順</title>
      <link>https://open-garden.github.io/garden/ja/scenarioroadeditor/page3/</link>
      <pubDate>Wed, 25 Aug 2021 10:56:04 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/scenarioroadeditor/page3/</guid>
      <description>シナリオ作成やシミュレーション実行に必要なルート情報を作成する手順について追加例を用いて記します。
地図の読込 ここではExemples &amp;gt; 道路（合流）で地図を表示します。
道路構造と作成ルート 道路のIDとレーンのIDは以下のようになっています。
ここでは以下のように2つのルートを作成することを考えます。
Route1の作成 メニューからAdd &amp;gt; Routeを選択して新しいRoute要素を追加します。右側の編集タブではROUTEが選択され、新規に追加されたRoute要素が選択状態となります。削除するにはRoute要素を選択し、Deleteキーを押して削除してください。
追加した要素を選択して、IDをRoute1に変更します。
Route要素を選択し、Route項目のEditをクリックしてください。ルートの編集エディタが表示されます。エディタを閉じる場合は右上のXをクリックします。
ルートを以下のように記述します。entitiesの配列の要素にルートが通過するレーンの情報をentitiesの配列要素として記述します。ルートの開始はtypeをstartとします。ルートの終了はtypeをgoalとします。
[{&amp;#34;entities&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;start&amp;#34;, &amp;#34;lane&amp;#34;: {&amp;#34;road&amp;#34;: &amp;#34;R100&amp;#34;,&amp;#34;lane&amp;#34;: &amp;#34;L-03&amp;#34;}, &amp;#34;lanechange_start&amp;#34;: -1, &amp;#34;lanechange_end&amp;#34;: -1, &amp;#34;velocity&amp;#34;: 100 }, { &amp;#34;type&amp;#34;: &amp;#34;goal&amp;#34;, &amp;#34;lane&amp;#34;: {&amp;#34;road&amp;#34;: &amp;#34;R200&amp;#34;,&amp;#34;lane&amp;#34;: &amp;#34;L-03&amp;#34;}, &amp;#34;lanechange_start&amp;#34;: -1, &amp;#34;lanechange_end&amp;#34;: -1, &amp;#34;velocity&amp;#34;: 100 }]}] ルート編集エディタを閉じるとルートが描画されます。
Route2の作成 Route1と同様にメニューからAdd &amp;gt; Routeを選択して新しいRoute要素を追加します。IDをRoute1に変更してEditをクリックし、ルートの編集エディタを表示します。以下のようにルートを記述します。ルートの開始と終了の要素の間に道路がある場合は、typeをmidとします。
[{&amp;#34;entities&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;start&amp;#34;, &amp;#34;lane&amp;#34;: { &amp;#34;road&amp;#34;: &amp;#34;R300&amp;#34;, &amp;#34;lane&amp;#34;: &amp;#34;L-01&amp;#34; }, &amp;#34;lanechange_start&amp;#34;: -1, &amp;#34;lanechange_end&amp;#34;: -1, &amp;#34;velocity&amp;#34;: 50 }, { &amp;#34;type&amp;#34;: &amp;#34;mid&amp;#34;, &amp;#34;lane&amp;#34;: { &amp;#34;road&amp;#34;: &amp;#34;R200&amp;#34;, &amp;#34;lane&amp;#34;: &amp;#34;L-04&amp;#34; }, &amp;#34;lanechange_start&amp;#34;: 1, &amp;#34;lanechange_end&amp;#34;: -1, &amp;#34;velocity&amp;#34;: 50 }, { &amp;#34;type&amp;#34;: &amp;#34;mid&amp;#34;, &amp;#34;lane&amp;#34;: { &amp;#34;road&amp;#34;: &amp;#34;R200&amp;#34;, &amp;#34;lane&amp;#34;: &amp;#34;L-03&amp;#34; }, &amp;#34;lanechange_start&amp;#34;: -1, &amp;#34;lanechange_end&amp;#34;: 50, &amp;#34;velocity&amp;#34;: 70 }, { &amp;#34;type&amp;#34;: &amp;#34;goal&amp;#34;, &amp;#34;lane&amp;#34;: { &amp;#34;road&amp;#34;: &amp;#34;R200&amp;#34;, &amp;#34;lane&amp;#34;: &amp;#34;L-03&amp;#34; }, &amp;#34;lanechange_start&amp;#34;: -1, &amp;#34;lanechange_end&amp;#34;: -1, &amp;#34;velocity&amp;#34;: 100 }]}] 途中でレーンを変更する場合はlanechange_startとlanechange_endで指定します。指定の方法は以下の図を参照してください。</description>
    </item>
    
    <item>
      <title>Apache2</title>
      <link>https://open-garden.github.io/garden/ja/build/tools/apache2/</link>
      <pubDate>Tue, 22 Jun 2021 03:55:18 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/build/tools/apache2/</guid>
      <description>Apache2をインストールします。
sudo apt updatesudo apt install apache2=2.4.29-1ubuntu4.16以下のパスに***.confを作成します。
cd /etc/apache2/sites-available/sudo vi acacia.confファイルの内容は以下となります。
&amp;lt;VirtualHost *:80&amp;gt;ProxyPreserveHost OnProxyRequests OffErrorLog ${APACHE_LOG_DIR}/hoge_error.log&amp;lt;Location /scenario_modeler&amp;gt;ProxyPass http://localhost:8080/scenario_modelerProxyPassReverse http://localhost:8080/scenario_modeler&amp;lt;/Location&amp;gt;&amp;lt;Location /rdf_viewer&amp;gt;ProxyPass http://localhost:8080/rdf_viewerProxyPassReverse http://localhost:8080/rdf_viewer&amp;lt;/Location&amp;gt;&amp;lt;Location /scenario_editor&amp;gt;ProxyPass http://localhost:5000/scenario_editorProxyPassReverse http://localhost:5000/scenario_editor&amp;lt;/Location&amp;gt;&amp;lt;Location /airflow&amp;gt;ProxyPass http://localhost:8085/airflowProxyPassReverse http://localhost:8085/airflow&amp;lt;/Location&amp;gt;&amp;lt;Location /chronograf&amp;gt;ProxyPass http://localhost:8888/chronografProxyPassReverse http://localhost:8888/chronograf&amp;lt;/Location&amp;gt;&amp;lt;Location /road_editor&amp;gt;ProxyPass http://localhost:38001/road_editorProxyPassReverse http://localhost:38001/road_editor&amp;lt;/Location&amp;gt;&amp;lt;Location /portal&amp;gt;ProxyPass http://localhost:3000/portalProxyPassReverse http://localhost:3000/portal&amp;lt;/Location&amp;gt;&amp;lt;/VirtualHost&amp;gt;a2dissite コマンドで 000-default.</description>
    </item>
    
    <item>
      <title>ビルド&amp;インストール</title>
      <link>https://open-garden.github.io/garden/ja/build/build/</link>
      <pubDate>Mon, 21 Jun 2021 11:35:56 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/build/build/</guid>
      <description>GARDEN Scenario Platform をビルドします。
ユーザーを切り替えます。
sudo su - garden-userMavenをインストールします。
sudo apt updatesudo apt install maven=3.6.0-1~18.04.1Antをインストールします。
sudo apt updatesudo apt install ant=1.10.5-3~18.04Gitをインストールします。
sudo apt updatesudo apt install git=1:2.17.1-1ubuntu0.8GWTをダウンロードします。
cd ~/gardencurl -O https://storage.googleapis.com/gwt-releases/gwt-2.9.0.zipファイル展開します。
unzip gwt-2.9.0.zip -d ./GARDENプロジェクトのビルドを実行します。
cd ~/gardengit clone https://github.com/open-garden/garden.git garden-repocp ~/garden/garden-repo/script/GARDEN_acacia.sh ~/garden/script	cd ~/garden/scriptchmod 764 GARDEN_acacia.sh	./GARDEN_acacia.sh build_all必要な資材が以下のように格納されていることを確認します。
# warの資材/home/garden-user/garden/war├── Zipc_Webplatform.war├── com.zipc.garden.webplatform.dsl.fmc.web.war├── com.</description>
    </item>
    
    <item>
      <title>OpenDRIVEエクスポート</title>
      <link>https://open-garden.github.io/garden/ja/scenarioroadeditor/page4/</link>
      <pubDate>Wed, 25 Aug 2021 10:56:04 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/scenarioroadeditor/page4/</guid>
      <description>ScenarioRoadEditorで記述した地図情報をOpenDRIVEファイルに変換します。
github garden-opendriveconverter のREADME.mdを参照してください。</description>
    </item>
    
    <item>
      <title>シナリオの実行</title>
      <link>https://open-garden.github.io/garden/ja/scenarioexecutor/page4/</link>
      <pubDate>Wed, 25 Aug 2021 10:56:04 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/scenarioexecutor/page4/</guid>
      <description>シナリオを実行するためのシェルスクリプト~/ScenarioExecutor/run.shについて説明します。
#!/bin/bash source setup.sh python ScenarioExecutor.py シナリオ(.json) ウェイポイント(.json) [autoware] setup.shはCARLAのPythonAPIライブラリのパスを設定しています。
ScenarioExecutor.pyの引数は以下の通りです。
 シナリオ(.json) : シナリオの記述方法のページで説明しているシナリオファイルです。 ウェイポイント(.json) : RoadEditorからエクスポートしたファイルです。 autoware: 3番目の引数にautowareを指定するとAutowareとros-bridgeを起動します。何も指定しない場合はCARLAの~/carla/PythonAPI/examples/manual_control.pyを起動します。
autowareを指定した場合、自車両はAutowareによって自動でコントロールされ、指定しない場合はmanual_control.pyを使用して手動で自車両をコントロールします。  3番目の引数にautowareを指定した場合、ScenarioExecutor.pyはプログラム内で~/ScenarioExecutor/garden-autoware-agent/src/garden-autoware/launch/garden-autoware.shを呼び出します。
garden-autoware.sh以降は下記の順序で呼び出しが行われます。
ScenarioExecutor.py└── garden-autoware.sh $1 $2 $3├── autoware.sh $1 $2 $3│ └── garden-autoware.launch $1 $2 $3└── rviz.launch $1 $2 $3は引数です。それぞれ以下の値がセットされます。  $1: town:=マップ名
マップ名はシナリオのmap_idがセットされます。 $2: spawn_point:=自車両のスポーン位置
自車両のスポーン位置はシナリオのscenario:opening_scene:ego:start_position:wp_idとwp_idxで指定されたウェイポイントからx,y,z,roll,pitch,yawを取得してセットされます。 $3: waypoint:=Autoware用のウェイポイント
Autoware用のウェイポイントには~/ScenarioExecutor/garden-autoware-agent/src/garden-autoware/config/waypointに格納されているcsvファイルのパスがセットされます。
ファイル名はscenario:opening_scene:ego:start_position:wp_idから取得します。   garden-autoware.launch内で、Autowareとros-bridgeのノード及び自己位置推定ノードを起動しています。
(自己位置推定ノードはCARLAのOdometryセンサーの情報のみ使用して簡易的に自己位置推定を行うScenarioExecutorが提供するノードです。) rviz.launchはRVizの起動を行います。  </description>
    </item>
    
    <item>
      <title>Apache Jena Fuseki</title>
      <link>https://open-garden.github.io/garden/ja/build/tools/jena/</link>
      <pubDate>Tue, 22 Jun 2021 03:59:00 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/build/tools/jena/</guid>
      <description>Apache Jena Fusekiをインストールします。
fusekiグループを作成します。
sudo groupadd fusekifusekiユーザを作成します。
sudo useradd -s /bin/false -g fuseki -d /home/garden-user/etc/fuseki fusekiApache Jena Fusekiをダウンロードします。
cd ~/tmpwget http://archive.apache.org/dist/jena/binaries/apache-jena-fuseki-3.17.0.tar.gzダウンロードファイルを展開します。
sudo tar xzvf apache-jena-fuseki-3.17.0.tar.gz -C /home/garden-user/etc/fuseki --strip-components=1権限の設定をします。
sudo chgrp -R fuseki /home/garden-user/etc/fusekisudo chown -R fuseki /home/garden-user/etc/fusekisudo chmod -R 764 /home/garden-user/etc/fusekiデータベース設定ファイルの格納ディレクトリを作成します。
sudo -u fuseki mkdir -p /home/garden-user/etc/fuseki/run/configurationデータベース設定ファイル garden.ttl を作成します。
sudo -u fuseki vi /home/garden-user/etc/fuseki/run/configuration/garden.ttlgarden.ttl ファイルの内容は以下となります。
@prefix : &amp;lt;http://base/#&amp;gt; .@prefix rdf: &amp;lt;http://www.</description>
    </item>
    
    <item>
      <title>実行ログ</title>
      <link>https://open-garden.github.io/garden/ja/scenarioexecutor/page5/</link>
      <pubDate>Wed, 25 Aug 2021 10:56:04 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/scenarioexecutor/page5/</guid>
      <description>ScenarioExecutorを実行すると、シミュレーション実行時のログが保存されます。
ログの保存先は~/ScenarioExecutor/logです。ファイル名はシナリオのファイル名と同じで、拡張子が.csvになります。
ログに保存される内容は以下の通りです。
   項目 内容     timestamp タイムスタンプ(50ms間隔でログを保存します)   scene_id シナリオのscene_id   ego_x 自車両のx座標 (m)   ego_y 自車両のy座標 (m)   ego_z 自車両のz座標 (m)   ego_roll 自車両のroll (ラジアン)   ego_pitch 自車両のpitch (ラジアン)   ego_yaw 自車両のyaw (ラジアン)   ego_lane_id 自車両の最寄りのレーンID (RoadEditorで定義したルートの順番に0から番号が割り振られます)   collision 自車両の衝突の有無 (通常は0で衝突時は0以外の値になります)   obs0_x 障害物0のx座標 (m)   obs0_y 障害物0のy座標 (m)   obs0_z 障害物0のz座標 (m)   obs0_roll 障害物0のroll (ラジアン)   obs0_pitch 障害物0のpitch (ラジアン)   obs0_yaw 障害物0のyaw (ラジアン)   obs0_lane_id 障害物0の最寄りのレーンID (RoadEditorで定義したルートの順番に0から番号が割り振られます)    障害物が複数ある場合は、obs1,obs2…と続きます。</description>
    </item>
    
    <item>
      <title>Tomcat</title>
      <link>https://open-garden.github.io/garden/ja/build/tools/tomcat/</link>
      <pubDate>Tue, 22 Jun 2021 04:10:34 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/build/tools/tomcat/</guid>
      <description>Tomcatをインストールします。
tomcatグループを作成します。
sudo groupadd tomcattomcatユーザを作成します。
sudo useradd -s /bin/false -g tomcat -d /home/garden-user/etc/tomcat tomcatApache Tomcatをダウンロードします。Tomcat 9 の最新版をダウンロードしてください。ダウンロードのURLは以下から確認できます。 https://downloads.apache.org/tomcat/tomcat-9/
確認したバージョンで以下の v9.x.x を変更して実行してください。
cd ~/tmpwget https://downloads.apache.org/tomcat/tomcat-9/v9.x.x/bin/apache-tomcat-9.x.x.tar.gzダウンロードファイルを展開します。
sudo tar xzvf apache-tomcat-9.x.x.tar.gz -C /home/garden-user/etc/tomcat --strip-components=1権限の設定をします。
cd /home/garden-user/etc/tomcatsudo chgrp -R tomcat /home/garden-user/etc/tomcatsudo chown -R tomcat /home/garden-user/etc/tomcatsudo chmod -R 764 /home/garden-user/etc/tomcatTomcatのサービスを設定します。
sudo vi /etc/systemd/system/tomcat.servicetomcat.serviceの内容は以下となります。
[Unit]Description=Apache Tomcat Web Application ContainerAfter=network.target[Service]Type=forkingEnvironment=JAVA_HOME=/usr/lib/jvm/java-1.8.0-amazon-correttoEnvironment=CATALINA_PID=/home/garden-user/etc/tomcat/temp/tomcat.pidEnvironment=CATALINA_HOME=/home/garden-user/etc/tomcatEnvironment=CATALINA_BASE=/home/garden-user/etc/tomcatEnvironment=&#39;CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC&#39;Environment=&#39;JAVA_OPTS=-Djava.</description>
    </item>
    
    <item>
      <title>InfluxDB</title>
      <link>https://open-garden.github.io/garden/ja/build/tools/influxdb/</link>
      <pubDate>Tue, 22 Jun 2021 04:17:12 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/build/tools/influxdb/</guid>
      <description>InfluxDBをインストールします。
リポジトリを追加します。
echo &amp;quot;deb https://repos.influxdata.com/ubuntu bionic stable&amp;quot; | sudo tee /etc/apt/sources.list.d/influxdb.listGPGキーをインポートします。
sudo curl -sL https://repos.influxdata.com/influxdb.key | sudo apt-key add -InfluxDBをインストールします。
sudo apt-get updatesudo apt-get install influxdbinfluxdb.confを編集します。
sudo vi /etc/influxdb/influxdb.confbind-address を有効にします。
[http]# Determines whether HTTP endpoint is enabled.enabled = true# Determines whether the Flux query endpoint is enabled.# flux-enabled = false# Determines whether the Flux query logging is enabled.# flux-log-enabled = false# The bind address used by the HTTP service.</description>
    </item>
    
    <item>
      <title>Chronograf</title>
      <link>https://open-garden.github.io/garden/ja/build/tools/chronograf/</link>
      <pubDate>Tue, 22 Jun 2021 07:48:38 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/build/tools/chronograf/</guid>
      <description>chronografをインストールします。
wgetで.debをダウンロードします。
cd ~/tmpsudo wget https://dl.influxdata.com/chronograf/releases/chronograf_1.8.9.1_amd64.debインストールします。
sudo dpkg -i chronograf_1.8.9.1_amd64.deb設定ファイルを編集します。以下のようにEnvironment=&amp;quot;BASE_PATH=/chronograf&amp;quot;を追加します。
sudo vi /lib/systemd/system/chronograf.service[Service]User=chronografGroup=chronografEnvironment=&amp;quot;HOST=0.0.0.0&amp;quot;Environment=&amp;quot;PORT=8888&amp;quot;Environment=&amp;quot;BASE_PATH=/chronograf&amp;quot;Environment=&amp;quot;BOLT_PATH=/var/lib/chronograf/chronograf-v1.db&amp;quot;サービスの自動起動有効にします。
sudo systemctl enable chronograf設定ファイルを再読込します。
sudo systemctl --system daemon-reloadchronografを起動します。
sudo systemctl restart chronograf</description>
    </item>
    
    <item>
      <title>Airflow</title>
      <link>https://open-garden.github.io/garden/ja/build/tools/airflow/</link>
      <pubDate>Tue, 22 Jun 2021 04:43:25 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/build/tools/airflow/</guid>
      <description>Airflowをインストールします。
airflowグループを作成します。
sudo groupadd airflowairflowユーザを作成します。
sudo useradd -s /bin/false -g airflow -d /home/garden-user/etc/airflow airflow権限の設定をします。
cd /home/garden-user/etc/airflowsudo chgrp -R airflow /home/garden-user/etc/airflowsudo chown -R airflow /home/garden-user/etc/airflowsudo chmod -R 764 /home/garden-user/etc/airflowPython3.6をインストールします。
sudo apt install python3.6 python3-pippsql を使って PostgreSQL へ接続します。
sudo -u postgres psql以下のように表示されます。
psql (11.12 (Ubuntu 11.12-1.pgdg18.04+1))&amp;quot;help&amp;quot; でヘルプを表示します。postgres=#データベース「airflow」を作成します。
CREATE DATABASE airflow;psqlを終了してPostgreSQLから切断します。
\qユーザーを切り替えます。
sudo su - airflow --shell=/bin/bash環境変数の設定をします。
vi ~/.profile.</description>
    </item>
    
    <item>
      <title>Nodejs</title>
      <link>https://open-garden.github.io/garden/ja/build/tools/nodejs/</link>
      <pubDate>Tue, 22 Jun 2021 08:01:31 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/build/tools/nodejs/</guid>
      <description>nodejs, npm をインストールします。
sudo apt install -y nodejs npmn package をインストールします。
sudo npm install n@7.3.0 -gn package を使って node をインストールします。
sudo n 14.17.3最初にインストールした nodejs, npm は削除します。
sudo apt purge -y nodejs npmバージョンを確認します。
node -vgarden-user のホームディレクトリに、npm グローバルインストール用のディレクトリを作成します。
mkdir ~/.npm-global新しいディレクトリパスを使用するようにnpmを設定します。
npm config set prefix &#39;~/.npm-global&#39;システム変数の設定をします。
cat &amp;gt;&amp;gt; ~/.bashrc &amp;lt;&amp;lt;EOL# set path so it includes user&#39;s npm global installations directory.export PATH=~/.npm-global/bin:$PATHEOLシステム変数を適用します。
source ~/.</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://open-garden.github.io/garden/ja/build/tools/mongodb/</link>
      <pubDate>Tue, 22 Jun 2021 08:08:50 +0900</pubDate>
      
      <guid>https://open-garden.github.io/garden/ja/build/tools/mongodb/</guid>
      <description>MongoDBをインストールします。
GPGキーをインポートします。
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4リポジトリを追加します。
echo &amp;quot;deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse&amp;quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.listMongoDBをインストールします。
sudo apt updatesudo apt install mongodb-org=4.0.25MongoDBを起動します。
sudo systemctl start mongodMongoDB compass をインストールします。
ブラウザで https://www.mongodb.com/try/download/compass にアクセスしてダウンロードします。
MongoDB compass をインストールします。
sudo dpkg -i EnterfileName.debアクティビティからMongoDB compassを検索して実行します。
New Connectionタブを押下し、接続先URLを入力します。 （URL:mongodb://localhost:27017）</description>
    </item>
    
  </channel>
</rss>
