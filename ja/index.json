[
{
	"uri": "https://open-garden.github.io/garden/ja/scenarioexecutor/page1/",
	"title": "ビルド手順",
	"tags": [],
	"description": "",
	"content": "ScenarioExecutor ScenarioExecutorは自動運転アルゴリズムのテストを行うためのシナリオ実行エンジンです。\n本リポジトリにはCARLAとAutowareを使用し、実際にシナリオを実行しテストを行うデモ環境が含まれています。\n動作環境  Ubuntu 18.04 CARLA Simulator 0.9.11 ROS/ROS2 bridge for CARLA simulator 0.9.11 ROS Melodic Autoware 1.14.0  CARLAのビルド 下記サイトを参照しCARLA 0.9.11のビルドを行ってください。\nhttps://carla.readthedocs.io/en/0.9.11/build_linux/\nインストール手順の最後にある、以下のコマンドは必須ですので、必ず実行してください。\nmake PythonAPI ARGS=\u0026quot;--python-version=2\u0026quot;\rros-bridgeのインストール cd ~\rgit clone https://github.com/carla-simulator/ros-bridge.git\rcd ros-bridge\r./install_dependencies.sh\rCARLAのバージョンに対応したros-bridgeをcloneしてください。\nhttps://github.com/carla-simulator/ros-bridge\n2021年8月現在、CARLA 0.9.11に対応するros-bridgeはリリースされていませんので、masterをcloneしてください。\nROS Melodicのインストール 下記サイト等を参照しROS Melodicのインストールを行ってください。\nhttp://wiki.ros.org/melodic/Installation/Ubuntu\nAutowareのビルド 下記サイトを参照しAutoware 1.14.0のビルドを行ってください。\nhttps://gitlab.com/autowarefoundation/autoware.ai/autoware/-/wikis/Source-Build\nScenarioExecutorのダウンロード 以下のコマンドを実行してください。\ncd ~\rgit clone https://github.com/open-garden/garden-scenarioexecutor.git\rデモ実行 ScenarioExecutorには簡単にシナリオ実行のデモを行うためのシェルスクリプトやROSのlaunchファイルがあらかじめ含まれています。\nこれらのファイルは各アプリケーションが以下のフォルダにインストールされていることを前提にしています。    アプリケーション フォルダ     CARLA ~/carla   ros-bridge ~/ros-bridge   Autoware ~/autoware.ai   ScenarioExecutor ~/ScenarioExecutor    構成 アプリケーションの構成は以下のようになります。\nセットアップ 以下の手順はインストール後、一度だけ実施してください。\n  Unreal EngineのContent及びSourceフォルダにScenarioExecutorのアセット及びc++のソースコードを配置します。\ncd ~/ScenarioExecutor\r./ue4setup.sh\r実際は~/carla/Unreal/CarlaUE4/Content及び~/carla/Unreal/CarlaUE4/Source/CarlaUE4フォルダ内にシンボリックリンクの作成のみ行います。\n実体は~/ScenarioExecutor/Unrealの中にあります。\n~/carla/Unreal/CarlaUE4/Contentにシンボリックリンク/Gardenが作成されます。\n~/carla/Unreal/CarlaUE4/Source/CarlaUE4にシンボリックリンク/Gardenが作成されます。\n  ros-bridge及び自己位置推定ノードをビルドします。\ncd ~/ScenarioExecutor/garden-autoware-agent\r./make.sh\rmake.shは、~/ScenarioExecutor/garden-autoware-agent/src内に~/ros-bridgeへのシンボリックリンクを作成し、ros-bridgeも含めて一括でビルドします。\n自己位置推定ノードはconvert_odometry_to_poseからpublishされる/gnss_poseをsubscribeし、Autowareの/estimate_twistをpublishするノードです。\n(convert_odometry_to_poseは~/autoware.ai/src/autoware/simulation/carla_simulator_bridge/carla_autoware_bridge/src/carla_autoware_bridgeにあります)\nこのノードにより三次元点群地図とLiDARを使用して自己位置推定を行うndt_matchingノードを使用せずにCARLAのオドメトリセンサーの情報のみで簡易的に自己位置推定を行うことができるようになります。\n  シナリオ実行   CARLAを起動します。\ncd ~/carla\rmake launch\r起動したらPlayボタンをクリックします。\n  Autoware及びros-bridgeを起動します。\ncd ~/ScenarioExecutor\r./run.sh\r  "
},
{
	"uri": "https://open-garden.github.io/garden/ja/scenarioroadeditor/page1/",
	"title": "ビルド手順",
	"tags": [],
	"description": "",
	"content": "ビルド手順はBuild \u0026amp; Installを参照してください。\n"
},
{
	"uri": "https://open-garden.github.io/garden/ja/build/tools/postgresql/",
	"title": "PostgreSQL",
	"tags": [],
	"description": "",
	"content": "認証キーの追加をします。\nsudo curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\rリポジトリの追加をします。\nlsb_release -c\rsudo sh -c 'echo \u0026quot;deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main\u0026quot; \u0026gt; /etc/apt/sources.list.d/pgdg.list'\rPostgreSQL をインストールします。\nsudo apt update\rsudo apt install postgresql-11\r.pgpassファイルの設定をします。\nデータベースに接続するとき、psqlは強制的にパスワード入力を促しますので、パスワードの入力省略するため、事前に.pgpassファイルを作成します。\ngarden-userに切り替えます\nsudo su - garden-user\r.pgpassファイルを編集します。\nvi ~/.pgpass\r.pgpassファイルの内容は以下の通りです。\n# データベースgardenの接続情報\rlocalhost:5432:garden:postgres:postgres\r# データベースairflowの接続情報\rlocalhost:5432:airflow:postgres:postgres\r.pgpassファイルの権限を変更します。\nchmod 600 ~/.pgpass\r外部接続許可設定（オプション）\n外部から接続するため、接続許可の設定をします。\npostgresql.conf を編集します。\nsudo vi /etc/postgresql/11/main/postgresql.conf\r57行目【# - Connection Settings -】の付近、listen_addresses = \u0026lsquo;*\u0026rsquo; を追加し、すべての通信を受け入れます。\n# - Connection Settings -\r#listen_addresses = 'localhost' # what IP address(es) to listen on;\rlisten_addresses = '*'\rpg_hba.conf の編集をします。\n sudo vi /etc/postgresql/11/main/pg_hba.conf\r91行目【# IPv4 local connections:】の付近、認証を受け付けるIP/IP範囲を追記します。\n# IPv4 local connections:\rhost all all 127.0.0.1/32 md5\rhost all all 0.0.0.0/0 md5\rfirewallがアクティブになる場合、portの許可を追加します。\nsudo ufw allow 5432/tcp\rpostgres ユーザーのパスワード設定をします。\npsql を使って PostgreSQL へ接続します。\nsudo -u postgres psql\r以下のように表示されます。\npsql (11.12 (Ubuntu 11.12-1.pgdg18.04+1))\r\u0026quot;help\u0026quot; でヘルプを表示します。\rpostgres=#\rpostgres ユーザーのパスワードを \u0026ldquo;postgres\u0026rdquo; に設定します。\n\\password postgres\rデータベース「garden」を作成します。\nCREATE DATABASE garden;\rデータベース「garden」に接続します。\n\\c garden\r以下の２つのSQLを実行して、データベース「garden」にテーブルを作成します。\nCREATE TABLE public.drivingdata\r(\rid bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),\rsourcetype character varying(255) COLLATE pg_catalog.\u0026quot;default\u0026quot;,\rsourceuri bytea,\rCONSTRAINT drivingdata_pkey PRIMARY KEY (id)\r)\rWITH (\rOIDS = FALSE\r)\rTABLESPACE pg_default;\rALTER TABLE public.drivingdata\rOWNER to postgres;\rCREATE TABLE public.importeddata\r(\rid bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),\rdrivingdataid bigint,\rlat double precision,\rlatmax double precision,\rlatmin double precision,\rlon double precision,\rlonmax double precision,\rlonmin double precision,\rmapid character varying(255) COLLATE pg_catalog.\u0026quot;default\u0026quot;,\rmeasurement character varying(255) COLLATE pg_catalog.\u0026quot;default\u0026quot;,\rstatus integer,\rCONSTRAINT importeddata_pkey PRIMARY KEY (id),\rCONSTRAINT importeddata_measurement UNIQUE (measurement)\r)\rWITH (\rOIDS = FALSE\r)\rTABLESPACE pg_default;\rALTER TABLE public.importeddata\rOWNER to postgres;\rpsqlを終了してPostgreSQLから切断します。\n\\q\rPostgreSQLサーバを起動します。\nsudo service postgresql start\r"
},
{
	"uri": "https://open-garden.github.io/garden/ja/build/createuser/",
	"title": "ユーザー作成",
	"tags": [],
	"description": "",
	"content": "Ubuntu 18.04 上にユーザーを作成します。ホームディレクトリを /home/garden-user に指定して、ユーザーを作成します。\nsudo useradd -s /bin/bash -m -d /home/garden-user -c \u0026quot;GARDEN user\u0026quot; garden-user\rパスワードを \u0026ldquo;garden\u0026rdquo; に設定します。\nsudo passwd garden-user\rgarden-user に sudo の権限を与えます。\nsudo usermod -aG sudo garden-user\rアプリ配置ディレクトリを作成します。 garden-user に切り替えます。\nsudo su - garden-user\rgarden-user のhomeディレクトリの直下に下記のようなフォルダを作成します。\nmkdir -p {etc/{airflow/{dags,data},fuseki,tomcat},garden/{war,dags,script,job_executor,node_services},tmp}\r/home/garden-user/\r├── etc\r│ ├── airflow\r│ ├── dags\r│ └── data\r│ ├── fuseki\r│ └── tomcat\r├── garden\r│ ├── war\r│ ├── dags\r│ ├── script\r│ ├── job_executor\r│ └── node_services\r├── tmp\r└── .pgpass\r"
},
{
	"uri": "https://open-garden.github.io/garden/ja/scenarioroadeditor/page2/",
	"title": "Mapの作成手順",
	"tags": [],
	"description": "",
	"content": "Mapの保存と読込 ScenarioRoadEditorを表示して、メニューからFile \u0026gt; Saveでローカル環境にjson形式で保存ができます。\n保存したMapファイルをScenarioRoadEditorで開く場合は、メニューからFile \u0026gt; Openでローカル環境のjson形式のファイルを開くことができます。\nMapの作成手順 Mapの作成手順の詳細は以下の動画を参照してください。※交差点の作成方法については以下に補足があります。\n  道路の方向について 道路には方向があり、道路を選択した際に、道路の移動や回転を編集できるハンドルが表示される側が、道路の開始側となります。交差点を作成する際には、接続する道路の方向を調べて道路の開始側（predecessor）か終了側（successor）のどちらを接続するかを指定します。\n交差点作成時の道路の接続順について 交差点に接続する道路は以下のように時計回りに接続する必要があります。 "
},
{
	"uri": "https://open-garden.github.io/garden/ja/scenarioexecutor/page2/",
	"title": "マップの追加",
	"tags": [],
	"description": "",
	"content": "以下の流れに沿ってCARLAにマップを追加します。\n詳細な手順を以降に記載します。 道路のメッシュの作成 RoadEditorを使用し地図を作成してください。\n作成したらFile \u0026gt; Export OBJでエクスポートしてください。\nルートの定義 RoadEditorで自車両及び他車両が走行するルートを定義してください。\n定義したらFile \u0026gt; Export Waypointでエクスポートしてください。\nOpenDriveの作成 RoadEditorのFile \u0026gt; Saveで出力したファイルから、OpenDrive変換ツールを使用しOpenDriveを作成してください。\nUnreal Engineにマップを追加 RoadEditorからエクスポートしたobjファイルをそのままCARLAにインポートするとスケールと座標系が異なるため、事前に修正を行う必要があります。\nここではBlenderを使用した修正方法について記載します。\n Blenderを起動し、File \u0026gt; Import \u0026gt; Wavefront (.obj)を選択します。\nRoadEditorからエクスポートしたobjファイルを選択しインポートします。 アスファルト部分のメッシュと白線部分のメッシュに分かれているため、アスファルト部分のみ選択します。\n File \u0026gt; Export \u0026gt; FBX (.fbx)を選択します。\nLimit to Selected Objectsにチェックを入れます。\nObject TypesはMeshのみ選択します。\nExport FBXをクリックします。\n 同様に白線部分もエクスポートします。\n CARLAにインポートします。\nインポート先のフォルダで右クリックしImport to /Game/...を選択します。\nBlenderからエクスポートしたfbxファイルを選択します。\nそのままImport Allをクリックします。\n 空のマップを用意します。\n/Content/Carla/Maps/BaseMap/BaseMapを/Content/Garden/Mapsにドラッグアンドドロップし、Copy Hereを選択します。\nマップの名前を変更しRoadEditorのIDを付けます。\nマップの名前はOpenDriveのファイル名とも一致している必要があります。 空のマップを開き、道路のメッシュを配置します。\nLocationとRotationはすべて0にしてください。 ScenarioExecutorのBlueprintを配置します。\n/Content/Garden/Blueprints/ScenarioExecutor/Garden_ScenarioExecutorをマップ上にドラッグアンドドロップして配置します。  OpenDriveを格納します。\n~/ScenarioExecutor/Content/Garden/Maps/OpenDriveにマップと同名のOpenDriveを格納します。  ウェイポイントの格納  ウェイポイントを格納します。\n~/ScenarioExecutor/waypointsにRoadEditorからエクスポートしたウェイポイント(.json)を格納してください。 RoadEditorからエクスポートしたウェイポイント(.json)をAutoware用のウェイポイント(.csv)に変換します。\n以下のコマンドを実行します。 cd ~/ScenarioExecutor/util\rpython AutowareWaypointConvertor.py ファイル名 速度\r ファイル名: RoadEditorからエクスポートしたウェイポイント(.json) 速度: ウェイポイントの速度(km/h)\n速度を省略した場合、RoadEditorでルートを定義した際に設定した速度が使用されます。   生成されたウェイポイントファイル(.csv)を~/ScenarioExecutor/garden-autoware-agent/src/garden-autoware/config/waypointに格納します。  "
},
{
	"uri": "https://open-garden.github.io/garden/ja/build/tools/",
	"title": "ツールのインストール",
	"tags": [],
	"description": "",
	"content": "インストールの準備をします。\nzip、unzip、curlをインストールします。\nsudo apt update\rsudo apt install zip unzip curl\r以下のツールのインストールと設定を行います。\n PostgreSQL Java Apache2 Apache Jena Fuseki Tomcat InfluxDB Chronograf Airflow Node.js MongoDB  "
},
{
	"uri": "https://open-garden.github.io/garden/ja/build/tools/java/",
	"title": "Java",
	"tags": [],
	"description": "",
	"content": "OpenJDK Amazon Corretto 8 をインストールします。\njava-common パッケージをインストールします。\nsudo apt-get update \u0026amp;\u0026amp; sudo apt-get install java-common=0.68ubuntu1~18.04.1\rLinux .deb ファイルをダウンロードして、インストールします。\ncd ~/tmp\rwget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.deb\rsudo apt install ./amazon-corretto-8-x64-linux-jdk.deb\rjavaバージョンを確認します。\njava -version\r以下のように表示されます。\nopenjdk version \u0026quot;1.8.0_292\u0026quot;\rOpenJDK Runtime Environment Corretto-8.292.10.1 (build 1.8.0_292-b10)\rOpenJDK 64-Bit Server VM Corretto-8.292.10.1 (build 25.292-b10, mixed mode)\r"
},
{
	"uri": "https://open-garden.github.io/garden/ja/scenarioexecutor/page3/",
	"title": "シナリオの記述方法",
	"tags": [],
	"description": "",
	"content": "シナリオの記述方法について解説します。\nシナリオはjson形式で記述します。\nサンプルのシナリオファイルが~/ScenarioExecutor/scenariosフォルダ内にありますので、参考にしてください。\nシナリオの記述内容は大きく4つのブロックに分かれています。    ブロック 記述内容     map_id RoadEditorのIDを指定します。   actors シナリオに登場する自車両、他車両、歩行者、障害物の情報を記述します。   scenario さまざまなシーンを定義し、シーン中にアクターがどのように振舞うか、シーン間をどのような条件で遷移するかを記述します。   stop_condition シナリオの終了条件を記述します。      map_id\nRoadEditorのIDを指定します。\n\u0026#34;map_id\u0026#34;: \u0026#34;highway\u0026#34;   actors\nシナリオ内に登場するアクターを定義します。\n ego\n自車両を定義します。  actor_id (int)\nアクターのIDを指定します。アクターが複数存在する場合、重複しない値を指定します。 model_id (string)\n車種のIDを指定します。CARLAで定義されている車種のIDを指定します。\n現在、シナリオから自車両の車種を指定することはできません。ros-bridge 0.9.11ではros-bridge/carla_spawn_objects/config/objects.json内で自車両の車種を指定します。 color (string)\n車両の色を指定します(RGB16進数)。\n現在、シナリオから自車両の色を指定することはできません。ros-bridgeの仕様でランダムになっています。   others\n他車両、歩行者等の障害物を定義します。   actor_id (int) - egoのactor_idと同じです。\n  model_id (string)\n他車両として指定できるIDは以下になります。\n   model_id     vehicle.audi.a2   vehicle.audi.etron   vehicle.audi.tt   vehicle.bmw.grandtourer   vehicle.chevrolet.impala   vehicle.charger2020.charger2020   vehicle.garden.gambulancejp   vehicle.garden.gpolicecarjp   vehicle.garden.gpumperjp   vehicle.lincoln2020.mkz2020   vehicle.mercedesccc.mercedesccc   vehicle.mini.cooperst   vehicle.nissan.micra   vehicle.tesla.model3   vehicle.toyota.prius   vehicle.volkswagen.t2   vehicle.kawasaki.ninja      color (string) - egoのcolorと同じです。\n    \u0026#34;actors\u0026#34;: { \u0026#34;ego\u0026#34;: { \u0026#34;actor_id\u0026#34;: 0, \u0026#34;model_id\u0026#34;: \u0026#34;vehicle.toyota.prius\u0026#34;, \u0026#34;color\u0026#34;: \u0026#34;000000\u0026#34; }, \u0026#34;others\u0026#34;: [ { \u0026#34;actor_id\u0026#34;: 1, \u0026#34;model_id\u0026#34;: \u0026#34;vehicle.nissan.micra\u0026#34;, \u0026#34;color\u0026#34;: \u0026#34;ff0000\u0026#34; }, { \u0026#34;actor_id\u0026#34;: 2, \u0026#34;model_id\u0026#34;: \u0026#34;vehicle.kawasaki.ninja\u0026#34;, \u0026#34;color\u0026#34;: \u0026#34;00ff00\u0026#34; } ] }   scenario\nシナリオを定義します。\nシナリオはオープニングシーンから始まり、さまざまなシーンへの遷移を経て、最終的にエンディングシーンに遷移して終了となります。\n  opening_scene\n各アクターの初期状態を定義します。\n ego\n自車両の初期状態を定義します。  start_position\n自車両の初期位置を指定します。\nwp_idとwp_idxで指定したウェイポイントの座標が自車両の初期位置になります。  wp_id (string)\nウェイポイントID(RoadEditorでルートを定義した際に付けた名前)を指定します。\n wp_idx (int)\nウェイポイントのインデックスを指定します。RoadEditorでウェイポイントをクリックすると参照することができます。\n   end_position\n自車両の終了位置を指定します。\nwp_idとwp_idxで指定したウェイポイントの座標が自車両の終了位置になります。\n現在未使用です。Autowareの場合、Autoware自身が持つウェイポイントの終点が終了位置になりますので、シナリオで終了位置を指定することはできません。  wp_id (string) - start_positionのwp_idと同じです。 wp_idx (int) - start_positionのwp_idxと同じです。     others\n他車両、歩行者等の障害物の初期状態を定義します。  actor_id (int)\n対象となるアクターのIDを指定します。  start_position  type (string)\nウェイポイントの座標で指定する場合はwaypointを指定します。アクター間の距離で指定する場合はdistanceを指定します。 wp_id (string)\ntypeがwaypointのときwp_idを指定します。egoのstart_postionと同じです。 wp_idx (int)\ntypeがwaypointのときwp_idxを指定します。egoのstart_postionと同じです。 target_actor_id (int)\ntypeがdistanceのとき車間距離の基準となる相手のアクターを指定します。 distance (double)\ntypeがdistanceのとき車間距離を指定します。 measure_type (string)\ntypeがdistanceのとき車間距離をアクターの中心のからの距離で指定する場合はcenterを指定します。アクターの表面からの距離で指定する場合はsurfaceを指定します。\n   start_speed\nアクターの初期速度を指定します。  type (string)\n絶対速度の場合はabsoluteを指定します。相対速度の場合はrelativeを指定します。  target_actor_id (int)\ntypeがabsoluteのとき相対速度の基準となる相手のアクターを指定します。 value (double)\n速度(km/h)を指定します。typeがabsoluteのときは絶対速度、typeがrelativeのときは相対速度を意味します。 accel\ntypeがabsoluteのとき加速度を指定します。 type (string)\n徐々に加速させたい場合はspecifyを指定します。即時valueの速度にしたい場合はgods_handを指定します。 value (double)\ntypeがspecifyのとき加速度(m/s2)を指定します。         next_scenes\n次に遷移するシーンのIDを指定します。\n各シーンの定義には遷移条件が設定されており、next_scenesで指定したいずれかのシーンの遷移条件がtrueとなった時点でそのシーンに遷移します。\n  \u0026#34;opening_scene\u0026#34;: { \u0026#34;ego\u0026#34;: { \u0026#34;start_position\u0026#34;: { \u0026#34;wp_id\u0026#34;: \u0026#34;Waypoint01\u0026#34;, \u0026#34;wp_idx\u0026#34;: 0 } } \u0026#34;others\u0026#34;: [ { \u0026#34;actor_id\u0026#34;: 1, \u0026#34;start_position\u0026#34;: { \u0026#34;wp_id\u0026#34;: \u0026#34;Waypoint01\u0026#34;, \u0026#34;wp_idx\u0026#34;: 20 }, \u0026#34;start_speed\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;relative\u0026#34;, \u0026#34;target_actor_id\u0026#34;: 0, \u0026#34;vlaue\u0026#34;: 0, }, \u0026#34;next_scenes\u0026#34;: [ 1, 2 ] } ] }   scenes\nシーンを定義します。遷移条件、アクション、遷移先から構成されます。\n  scene_id (int)\nシーンIDを指定します。\n  duration (double)\nここで指定した時間(s)、強制的にシーンにとどまり続けます。\n次のシーンへの遷移条件がtrueになっても、ここで指定した時間が経過するまで遷移しません。\n  conditions\n遷移条件を定義します。\n operator\n複数の遷移条件をorで判定するかandで判定するかを指定します。  position\nアクターが指定の位置に到達した場合の遷移条件を定義します。  actor_id (int)\n対象のアクターを指定します。 type (string)\n指定のウェイポイントに到達した場合はreachを指定します。現在はreachのみ指定できます。 wp_id (string)\ntypeがreachのときウェイポイントのIDを指定します。 wp_idx (int)\ntypeがreachのときウェイポイントのインデックスを指定します。 tolerance (double)\ntypeがreachのときwp_id、wp_idxで指定した座標の許容範囲の半径を指定します。   distance\nアクター同士の間隔が指定の距離に到達した場合の遷移条件を定義します。  actor_id (int)\n対象のアクターを指定します。 type (string)\n直線距離の場合はstraightを指定します。道路の中心線を基準にした距離の場合はtraveledを指定します。\n target_actor_id (int)\n距離の基準となるアクターを指定します。 comparison (string)\n\u0026gt;、\u0026gt;=、=、\u0026lt;=、\u0026lt;のいずれかを指定します。現在は\u0026lt;=、\u0026lt;のみ指定できます。 value (double)\n距離(m)を指定します。 measure_type (string)\nアクターの中心のからの距離で指定する場合はcenterを指定します。アクターの表面からの距離で指定する場合はsurfaceを指定します。   speed\nアクターが指定の速度に到達した場合の遷移条件を定義します。  actor_id (int)\n対象のアクターを指定します。 type (string)\n絶対速度の場合はabsoluteを指定します。相対速度の場合はrelativeを指定します。 target_actor_id (int)\ntypeがrelativeのとき相対速度の基準となるアクターを指定します。現在は自車のみ指定できます。 comparison (string)\n\u0026gt;、\u0026gt;=、=、\u0026lt;=、\u0026lt;のいずれかを指定します。現在は\u0026gt;=のみ指定できます。 value (double)\n速度(km/h)を指定します。typeがabsoluteのときは絶対速度、typeがrelativeのときは相対速度を意味します。   time_headway\nアクターが指定した地点に到着するまでの時間が指定した時間に達した場合の遷移条件を定義します。\n距離を速度で割った時間で判定します。  actor_id (int)\n対象のアクターを指定します。 wp_id (string)\nウェイポイントのIDを指定します。 wp_idx (int)\nウェイポイントのインデックスを指定します。 comparison (string)\n\u0026gt;、\u0026gt;=、=、\u0026lt;=、\u0026lt;のいずれかを指定します。現在は\u0026lt;=のみ指定できます。 value (double)\n時間(s)を指定します。   collision\n衝突時の遷移条件を定義します。 actor_id (int)\n対象のアクターを指定します。現在は自車のみ指定できます。 simulation_time\nシミュレーション開始からの経過時間の遷移条件を定義します。  comparison (string)\n\u0026gt;=のみ指定できます。 value (double)\n時間(s)を指定します。      \u0026#34;conditions\u0026#34;: { \u0026#34;or\u0026#34;: [ { \u0026#34;position\u0026#34;: { \u0026#34;actor_id\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;reach\u0026#34;, \u0026#34;wp_id\u0026#34;: \u0026#34;Waypoint01\u0026#34;, \u0026#34;wp_idx\u0026#34;: 125, \u0026#34;tolerance\u0026#34;: 1 } }, { \u0026#34;speed\u0026#34;: { \u0026#34;actor_id\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;absolute\u0026#34;, \u0026#34;comparison\u0026#34;: \u0026#34;\u0026lt;=\u0026#34;, \u0026#34;value\u0026#34;: 0.1 } } ] }   actions\nシーンに遷移したときに実行するアクションを定義します。\n  lane_change\nレーンチェンジのアクションを定義します。\n actor_id (int)\n対象のアクターを指定します。 type (string)\nlaneのみ指定できます。 wp_id (string)\nレーンチェンジ先のウェイポイントIDを指定します。 time (double)\nレーンチェンジにかかる時間を指定します。    lane_offset\nレーンの中心線から左右にオフセットするアクションを定義します。\n actor_id (int)\n対象のアクターを指定します。 value (double)\nレーンの中心線から左右にオフセットする距離(m)を指定します。左にオフセットする場合は+。右にオフセットする場合は-。0はレーンの中心線を走行します。 time (double)\nオフセットにかかる時間(s)を指定します。    speed\n速度変更のアクションを定義します。\n actor_id (int)\n対象のアクターを指定します。 type (string)\n絶対速度の場合はabsoluteを指定します。相対速度の場合はrelativeを指定します。 target_actor_id (int)\ntypeがrelativeのとき相対速度の基準となるアクターを指定します。 value (double)\n速度(km/h)を指定します。typeがabsoluteのときは絶対速度、typeがrelativeのときは相対速度を意味します。 accel\ntypeがabsoluteのとき加速度を指定します。  type (string)\n徐々に加速させたい場合はspecifyを指定します。即時valueの速度にしたい場合はgods_handを指定します。 value (double)\ntypeがspecifyのとき加速度(m/s2)を指定します。      traveled_distance\n車間距離を維持するアクションを定義します。\n actor_id (int)\n対象のアクターを指定します。 target_actor_id (int)\n車間距離の基準となる相手のアクターを指定します。 value (double)\n車間距離(m)を指定します。+は前方、-は後方になります。 measure_type (string)\nアクターの中心のからの距離で指定する場合はcenterを指定します。アクターの表面からの距離で指定する場合はsurfaceを指定します。    route_move\n指定した地点に移動させるアクションを定義します。地点は複数指定できます。\n actor_id (int)\n対象のアクターを指定します。 type\n指定したウェイポイントに向かって移動させたい場合はwaypointを指定します。(現在はアクターが歩行者の場合のみ有効です)\n現在走行しているウェイポイントから左右にオフセットした位置に移動させたい場合はwp_offsetを指定します。 route\nルートを定義します。  wp_id (string)\ntypeがwaypointの場合、ウェイポイントのIDを指定します。 wp_idx (int)\ntypeがwaypointの場合、ウェイポイントのインデックスを指定します。 wp_offset (double)\ntypeがwp_offsetの場合、レーンの中心線から左右にオフセットする距離(m)を指定します。左にオフセットする場合は+、右にオフセットする場合は-です。0はレーンの中心線を走行します。 time (double)\n前回の地点から次の地点までの移動時間(s)を指定します。速度は移動先までの距離と移動時間から自動的に計算されます。    \u0026#34;route_move\u0026#34;: { \u0026#34;actor_id\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;waypoint\u0026#34;, \u0026#34;route\u0026#34;: [ { \u0026#34;time\u0026#34;: 7.2, \u0026#34;wp_id\u0026#34;: \u0026#34;Waypoint02\u0026#34;, \u0026#34;wp_idx\u0026#34;: 500, \u0026#34;wp_offset\u0026#34;: 5 } ] }   light_state\nライトの点灯/消灯のアクションを定義します。\n actor_id (int)\n対象のアクターを指定します。 blinker_left (bool)\n左ウィンカーをを点灯するときはtrue、消灯するときはfalseを指定します。 blinker_right\n右ウィンカーをを点灯するときはtrue、消灯するときはfalseを指定します。 special1\n特殊なライトの点灯/消灯を行います。 点灯するときはtrue、消灯するときはfalseを指定します。\n車種ごとに対象となるライトが異なります。現在緊急車両のパトライトの点灯/消灯のみ対応しています。    sound_state\nサイレンの鳴動/停止のアクションを定義します。\n actor_id (int)\n対象のアクターを指定します。 sound (bool)\nサイレンを鳴動させるときはtrue、停止するときはfalseを指定します。    \u0026#34;actions\u0026#34;: [ { \u0026#34;lane_change\u0026#34;: { \u0026#34;actor_id\u0026#34;: 1, \u0026#34;type\u0026#34;: \u0026#34;lane\u0026#34;, \u0026#34;wp_id\u0026#34;: \u0026#34;Waypoint02\u0026#34;, \u0026#34;time\u0026#34;: 5 } } ]   next_scenes - opening_sceneのnext_scenesと同じです。\n  ending_scene\n最終シーンを定義します。\nこのシーンに到達したらシナリオが終了になります。\n scene_id - scenesのscene_idと同じです。 conditions - scenesのconditionと同じです。      \u0026#34;scenario\u0026#34;: { \u0026#34;opening_scene\u0026#34;: { \u0026#34;ego\u0026#34;: { ... }, \u0026#34;others\u0026#34;: [ ... ], \u0026#34;next_scenes\u0026#34;: [ 1 ] }, \u0026#34;scenes\u0026#34;: [ { \u0026#34;scene_id\u0026#34;: 1, \u0026#34;conditions\u0026#34;: { ... }, \u0026#34;actions\u0026#34;: [ ... ], \u0026#34;next_scenes\u0026#34;: [ 2 ] }, { \u0026#34;scene_id\u0026#34;: 2, \u0026#34;conditions\u0026#34;: { ... }, \u0026#34;actions\u0026#34;: [ ... ], \u0026#34;next_scenes\u0026#34;: [ 3 ] } ], \u0026#34;ending_scenes\u0026#34;: [ { \u0026#34;scene_id\u0026#34;: 3, \u0026#34;conditions\u0026#34;: { ... } } ] }     stop_conditions - scenesのconditionsと同じです。\nシナリオの終了条件を定義します。\n条件が成立したら強制的にシナリオを終了します。\n\u0026#34;stop_conditions\u0026#34;: { \u0026#34;or\u0026#34;: [ { \u0026#34;simulation_time\u0026#34;: { \u0026#34;comparison\u0026#34;: \u0026#34;\u0026gt;=\u0026#34;, \u0026#34;value\u0026#34;: 300 } } ] }   "
},
{
	"uri": "https://open-garden.github.io/garden/ja/scenarioroadeditor/page3/",
	"title": "ルートの作成手順",
	"tags": [],
	"description": "",
	"content": "シナリオ作成やシミュレーション実行に必要なルート情報を作成する手順について追加例を用いて記します。\n地図の読込 ここではExemples \u0026gt; 道路（合流）で地図を表示します。\n道路構造と作成ルート 道路のIDとレーンのIDは以下のようになっています。\nここでは以下のように2つのルートを作成することを考えます。\nRoute1の作成 メニューからAdd \u0026gt; Routeを選択して新しいRoute要素を追加します。右側の編集タブではROUTEが選択され、新規に追加されたRoute要素が選択状態となります。削除するにはRoute要素を選択し、Deleteキーを押して削除してください。\n追加した要素を選択して、IDをRoute1に変更します。\nRoute要素を選択し、Route項目のEditをクリックしてください。ルートの編集エディタが表示されます。エディタを閉じる場合は右上のXをクリックします。\nルートを以下のように記述します。entitiesの配列の要素にルートが通過するレーンの情報をentitiesの配列要素として記述します。ルートの開始はtypeをstartとします。ルートの終了はtypeをgoalとします。\n[{\u0026#34;entities\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;start\u0026#34;, \u0026#34;lane\u0026#34;: {\u0026#34;road\u0026#34;: \u0026#34;R100\u0026#34;,\u0026#34;lane\u0026#34;: \u0026#34;L-03\u0026#34;}, \u0026#34;lanechange_start\u0026#34;: -1, \u0026#34;lanechange_end\u0026#34;: -1, \u0026#34;velocity\u0026#34;: 100 }, { \u0026#34;type\u0026#34;: \u0026#34;goal\u0026#34;, \u0026#34;lane\u0026#34;: {\u0026#34;road\u0026#34;: \u0026#34;R200\u0026#34;,\u0026#34;lane\u0026#34;: \u0026#34;L-03\u0026#34;}, \u0026#34;lanechange_start\u0026#34;: -1, \u0026#34;lanechange_end\u0026#34;: -1, \u0026#34;velocity\u0026#34;: 100 }]}] ルート編集エディタを閉じるとルートが描画されます。\nRoute2の作成 Route1と同様にメニューからAdd \u0026gt; Routeを選択して新しいRoute要素を追加します。IDをRoute1に変更してEditをクリックし、ルートの編集エディタを表示します。以下のようにルートを記述します。ルートの開始と終了の要素の間に道路がある場合は、typeをmidとします。\n[{\u0026#34;entities\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;start\u0026#34;, \u0026#34;lane\u0026#34;: { \u0026#34;road\u0026#34;: \u0026#34;R300\u0026#34;, \u0026#34;lane\u0026#34;: \u0026#34;L-01\u0026#34; }, \u0026#34;lanechange_start\u0026#34;: -1, \u0026#34;lanechange_end\u0026#34;: -1, \u0026#34;velocity\u0026#34;: 50 }, { \u0026#34;type\u0026#34;: \u0026#34;mid\u0026#34;, \u0026#34;lane\u0026#34;: { \u0026#34;road\u0026#34;: \u0026#34;R200\u0026#34;, \u0026#34;lane\u0026#34;: \u0026#34;L-04\u0026#34; }, \u0026#34;lanechange_start\u0026#34;: 1, \u0026#34;lanechange_end\u0026#34;: -1, \u0026#34;velocity\u0026#34;: 50 }, { \u0026#34;type\u0026#34;: \u0026#34;mid\u0026#34;, \u0026#34;lane\u0026#34;: { \u0026#34;road\u0026#34;: \u0026#34;R200\u0026#34;, \u0026#34;lane\u0026#34;: \u0026#34;L-03\u0026#34; }, \u0026#34;lanechange_start\u0026#34;: -1, \u0026#34;lanechange_end\u0026#34;: 50, \u0026#34;velocity\u0026#34;: 70 }, { \u0026#34;type\u0026#34;: \u0026#34;goal\u0026#34;, \u0026#34;lane\u0026#34;: { \u0026#34;road\u0026#34;: \u0026#34;R200\u0026#34;, \u0026#34;lane\u0026#34;: \u0026#34;L-03\u0026#34; }, \u0026#34;lanechange_start\u0026#34;: -1, \u0026#34;lanechange_end\u0026#34;: -1, \u0026#34;velocity\u0026#34;: 100 }]}] 途中でレーンを変更する場合はlanechange_startとlanechange_endで指定します。指定の方法は以下の図を参照してください。\n"
},
{
	"uri": "https://open-garden.github.io/garden/ja/build/tools/apache2/",
	"title": "Apache2",
	"tags": [],
	"description": "",
	"content": "Apache2をインストールします。\nsudo apt update\rsudo apt install apache2=2.4.29-1ubuntu4.16\r以下のパスに***.confを作成します。\ncd /etc/apache2/sites-available/\rsudo vi acacia.conf\rファイルの内容は以下となります。\n\u0026lt;VirtualHost *:80\u0026gt;\rProxyPreserveHost On\rProxyRequests Off\rErrorLog ${APACHE_LOG_DIR}/hoge_error.log\r\u0026lt;Location /scenario_modeler\u0026gt;\rProxyPass http://localhost:8080/scenario_modeler\rProxyPassReverse http://localhost:8080/scenario_modeler\r\u0026lt;/Location\u0026gt;\r\u0026lt;Location /rdf_viewer\u0026gt;\rProxyPass http://localhost:8080/rdf_viewer\rProxyPassReverse http://localhost:8080/rdf_viewer\r\u0026lt;/Location\u0026gt;\r\u0026lt;Location /scenario_editor\u0026gt;\rProxyPass http://localhost:5000/scenario_editor\rProxyPassReverse http://localhost:5000/scenario_editor\r\u0026lt;/Location\u0026gt;\r\u0026lt;Location /airflow\u0026gt;\rProxyPass http://localhost:8085/airflow\rProxyPassReverse http://localhost:8085/airflow\r\u0026lt;/Location\u0026gt;\r\u0026lt;Location /chronograf\u0026gt;\rProxyPass http://localhost:8888/chronograf\rProxyPassReverse http://localhost:8888/chronograf\r\u0026lt;/Location\u0026gt;\r\u0026lt;Location /road_editor\u0026gt;\rProxyPass http://localhost:38001/road_editor\rProxyPassReverse http://localhost:38001/road_editor\r\u0026lt;/Location\u0026gt;\r\u0026lt;Location /portal\u0026gt;\rProxyPass http://localhost:3000/portal\rProxyPassReverse http://localhost:3000/portal\r\u0026lt;/Location\u0026gt;\r\u0026lt;/VirtualHost\u0026gt;\ra2dissite コマンドで 000-default.conf を無効にします。\nsudo a2dissite 000-default\ra2enmodでproxyモジュールを有効にします。\nsudo a2enmod proxy_http\ra2ensite コマンドで acacia.conf を有効にします。\nsudo a2ensite acacia\rApache を再起動して設定を反映します。\nsudo systemctl restart apache2\r"
},
{
	"uri": "https://open-garden.github.io/garden/ja/build/build/",
	"title": "ビルド&amp;インストール",
	"tags": [],
	"description": "",
	"content": "GARDEN Scenario Platform をビルドします。\nユーザーを切り替えます。\nsudo su - garden-user\rMavenをインストールします。\nsudo apt update\rsudo apt install maven=3.6.0-1~18.04.1\rAntをインストールします。\nsudo apt update\rsudo apt install ant=1.10.5-3~18.04\rGitをインストールします。\nsudo apt update\rsudo apt install git=1:2.17.1-1ubuntu0.8\rGWTをダウンロードします。\ncd ~/garden\rcurl -O https://storage.googleapis.com/gwt-releases/gwt-2.9.0.zip\rファイル展開します。\nunzip gwt-2.9.0.zip -d ./\rGARDENプロジェクトのビルドを実行します。\ncd ~/garden\rgit clone https://github.com/open-garden/garden.git garden-repo\rcp ~/garden/garden-repo/script/GARDEN_acacia.sh ~/garden/script\tcd ~/garden/script\rchmod 764 GARDEN_acacia.sh\t./GARDEN_acacia.sh build_all\r必要な資材が以下のように格納されていることを確認します。\n# warの資材\r/home/garden-user/garden/war\r├── Zipc_Webplatform.war\r├── com.zipc.garden.webplatform.dsl.fmc.web.war\r├── com.zipc.garden.webplatform.dsl.sc.web.war\r├── RDFViewer.war\r└── prefix.properties\r# dagsの資材\r/home/garden-user/etc/airflow/dags\r├── analyzer\r├── coordinates_converter.py\r├── coordinates_converter_trigger.py\r├── garden_analyzer.py\r├── garden_dag_trigger.py\r├── lon_lat_extractor.py\r└── requirements.txt\r# scriptの資材\r/home/garden-user/garden/script\r├── CompactDatabase.jar\r└── GARDEN_acacia.sh\r# Job Executorの資材\r/home/garden-user/garden/job_executor/\r├── Zipc_JobExecutor.jar\r├── acts_cmd_2.92.jar\r└── lib\r├── Zipc_Xtext_SC.jar\r└── z3\r├── Microsoft.Z3.deps.json\r├── Microsoft.Z3.dll\r├── Microsoft.Z3.xml\r├── com.microsoft.z3.jar\r├── libz3.a\r├── libz3.so\r├── libz3java.so\r├── requirements.txt\r└── z3\r# node系アプリの資材\r/home/garden-user/garden/node_services/\r├── GARDEN_Portal\r├── Zipc_ScenarioEditor\r└── Zipc_Microservice-Road\rgarden-userでPM2をインストールします。\nnpm install pm2@5.1.0 -g\recosystem.config.jsファイルを新規作成する\ncd /home/garden-user/garden/node_services\rpm2 ecosystem\r作成されたファイルの内容を変更します。\nvi /home/garden-user/garden/node_services/ecosystem.config.js\rmodule.exports = {\rapps : [\r{\rname: 'portal',\rscript: 'npm --prefix /home/garden-user/garden/node_services/GARDEN_Portal/server run start',\rerror_file: '/home/garden-user/garden/node_services/GARDEN_Portal/server/logs/err.log',\rout_file: '/home/garden-user/garden/node_services/GARDEN_Portal/server/logs/out.log',\rtime: true\r},{\rname: 'road_service',\rscript: '/home/garden-user/garden/node_services/Zipc_Microservice-Road/index.js',\rerror_file: '/home/garden-user/garden/node_services/Zipc_Microservice-Road/logs/err.log',\rout_file: '/home/garden-user/garden/node_services/Zipc_Microservice-Road/logs/out.log',\rtime: true\r},{\rname: 'scenario_editor',\rscript: 'npm --prefix /home/garden-user/garden/node_services/Zipc_ScenarioEditor run start',\rerror_file: '/home/garden-user/garden/node_services/Zipc_ScenarioEditor/logs/err.log',\rout_file: '/home/garden-user/garden/node_services/Zipc_ScenarioEditor/logs/out.log',\rtime: true\r}\r]\r};\rapache2.confの設定を変更します。\nsudo vi /etc/apache2/apache2.conf\r以下を追記します。\n\u0026lt;Directory /home/garden-user/etc/tomcat/webapps\u0026gt;\rOptions Indexes FollowSymLinks\rAllowOverride None\rRequire all granted\r\u0026lt;/Directory\u0026gt;\rLocationを追記します。\n\u0026lt;Location /scenario_modeler/\u0026gt;\rProxyPass ajp://localhost:8080/scenario_modeler/\r\u0026lt;/Location\u0026gt;\r\u0026lt;Location /rdf_viewer/\u0026gt;\rProxyPass ajp://localhost:8080/rdf_viewer/\r\u0026lt;/Location\u0026gt;\rAJPポート設定の追加をします。\nsudo vi /etc/apache2/mods-available/proxy_ajp.conf\rproxy_ajp.conf の内容は以下となります。\nProxyPass /scenario_modeler/ ajp://localhost:8080/scenario_modeler/\rProxyPass /rdf_viewer/ ajp://localhost:8080/rdf_viewer/\rproxy proxy_ajp　を有効にします。\ncd /etc/apache2/mods-available/\rsudo a2enmod proxy proxy_ajp\rapache2 を再起動します。\nsudo systemctl restart apache2\rTomcatの設定を変更します。\nsudo vi /home/garden-user/etc/tomcat/conf/server.xml\r以下を追記します。\n\u0026lt;Context path=\u0026quot;/scenario_modeler\u0026quot;\rdocBase=\u0026quot;/home/garden-user/etc/tomcat/webapps/Zipc_Webplatform\u0026quot;\rdebug=\u0026quot;0\u0026quot; reloadable=\u0026quot;true\u0026quot; /\u0026gt;\r\u0026lt;Context path=\u0026quot;/rdf_viewer\u0026quot;\rdocBase=\u0026quot;/home/garden-user/etc/tomcat/webapps/RDFViewer\u0026quot;\rdebug=\u0026quot;0\u0026quot; reloadable=\u0026quot;true\u0026quot; /\u0026gt;\rtomcat, apacheを再起動します。\nsudo systemctl restart tomcat\rsudo systemctl restart apache2\rGARDENのサービスを実行するには以下を実行します。\ncd ~/garden/script\r./GARDEN_acacia.sh start_all\rGARDENのサービスを停止するには以下を実行します。\ncd ~/garden/script\r./GARDEN_acacia.sh stop_all\rFusekiデータベースのcompactを実行するには以下を実行します。\ncd ~/garden/script\r./GARDEN_acacia.sh compact_fuseki\r定時実行の設定をします。\ncronをインストールします。\nsudo apt update\rsudo apt install cron\rcrontabファイルを作成します。\nsudo cp /etc/crontab /etc/cron.d/acacia_cron\rsudo vi /etc/cron.d/acacia_cron\r毎日23:30に、Fuseki Compactを実行する設定をします。\n# /etc/crontab: system-wide crontab\r# Unlike any other crontab you don't have to run the `crontab'\r# command to install the new version when you edit this file\r# and files in /etc/cron.d. These files also have username fields,\r# that none of the other crontabs do.\rSHELL=/bin/sh\rPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\r# m h dom mon dow user command\r30 23 * * * root cd /home/garden-user/garden/script \u0026amp;\u0026amp; \u0026quot;./GARDEN_acacia.sh\u0026quot; \u0026quot;compact_fuseki\u0026quot;\u0026gt;\u0026gt;/home/garden-user/garden/script/script.log\rcrontabファイルの設定を有効にします。\nsudo systemctl restart cron\r"
},
{
	"uri": "https://open-garden.github.io/garden/ja/scenarioroadeditor/page4/",
	"title": "OpenDRIVEエクスポート",
	"tags": [],
	"description": "",
	"content": "ScenarioRoadEditorで記述した地図情報をOpenDRIVEファイルに変換します。\ngithub garden-opendriveconverter のREADME.mdを参照してください。\n"
},
{
	"uri": "https://open-garden.github.io/garden/ja/scenarioexecutor/page4/",
	"title": "シナリオの実行",
	"tags": [],
	"description": "",
	"content": "シナリオを実行するためのシェルスクリプト~/ScenarioExecutor/run.shについて説明します。\n#!/bin/bash source setup.sh python ScenarioExecutor.py シナリオ(.json) ウェイポイント(.json) [autoware] setup.shはCARLAのPythonAPIライブラリのパスを設定しています。\nScenarioExecutor.pyの引数は以下の通りです。\n シナリオ(.json) : シナリオの記述方法のページで説明しているシナリオファイルです。 ウェイポイント(.json) : RoadEditorからエクスポートしたファイルです。 autoware: 3番目の引数にautowareを指定するとAutowareとros-bridgeを起動します。何も指定しない場合はCARLAの~/carla/PythonAPI/examples/manual_control.pyを起動します。\nautowareを指定した場合、自車両はAutowareによって自動でコントロールされ、指定しない場合はmanual_control.pyを使用して手動で自車両をコントロールします。  3番目の引数にautowareを指定した場合、ScenarioExecutor.pyはプログラム内で~/ScenarioExecutor/garden-autoware-agent/src/garden-autoware/launch/garden-autoware.shを呼び出します。\ngarden-autoware.sh以降は下記の順序で呼び出しが行われます。\nScenarioExecutor.py\r└── garden-autoware.sh $1 $2 $3\r├── autoware.sh $1 $2 $3\r│ └── garden-autoware.launch $1 $2 $3\r└── rviz.launch\r $1 $2 $3は引数です。それぞれ以下の値がセットされます。  $1: town:=マップ名\nマップ名はシナリオのmap_idがセットされます。 $2: spawn_point:=自車両のスポーン位置\n自車両のスポーン位置はシナリオのscenario:opening_scene:ego:start_position:wp_idとwp_idxで指定されたウェイポイントからx,y,z,roll,pitch,yawを取得してセットされます。 $3: waypoint:=Autoware用のウェイポイント\nAutoware用のウェイポイントには~/ScenarioExecutor/garden-autoware-agent/src/garden-autoware/config/waypointに格納されているcsvファイルのパスがセットされます。\nファイル名はscenario:opening_scene:ego:start_position:wp_idから取得します。   garden-autoware.launch内で、Autowareとros-bridgeのノード及び自己位置推定ノードを起動しています。\n(自己位置推定ノードはCARLAのOdometryセンサーの情報のみ使用して簡易的に自己位置推定を行うScenarioExecutorが提供するノードです。) rviz.launchはRVizの起動を行います。  "
},
{
	"uri": "https://open-garden.github.io/garden/ja/build/tools/jena/",
	"title": "Apache Jena Fuseki",
	"tags": [],
	"description": "",
	"content": "Apache Jena Fusekiをインストールします。\nfusekiグループを作成します。\nsudo groupadd fuseki\rfusekiユーザを作成します。\nsudo useradd -s /bin/false -g fuseki -d /home/garden-user/etc/fuseki fuseki\rApache Jena Fusekiをダウンロードします。\ncd ~/tmp\rwget http://archive.apache.org/dist/jena/binaries/apache-jena-fuseki-3.17.0.tar.gz\rダウンロードファイルを展開します。\nsudo tar xzvf apache-jena-fuseki-3.17.0.tar.gz -C /home/garden-user/etc/fuseki --strip-components=1\r権限の設定をします。\nsudo chgrp -R fuseki /home/garden-user/etc/fuseki\rsudo chown -R fuseki /home/garden-user/etc/fuseki\rsudo chmod -R 764 /home/garden-user/etc/fuseki\rデータベース設定ファイルの格納ディレクトリを作成します。\nsudo -u fuseki mkdir -p /home/garden-user/etc/fuseki/run/configuration\rデータベース設定ファイル garden.ttl を作成します。\nsudo -u fuseki vi /home/garden-user/etc/fuseki/run/configuration/garden.ttl\rgarden.ttl ファイルの内容は以下となります。\n@prefix : \u0026lt;http://base/#\u0026gt; .\r@prefix rdf: \u0026lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#\u0026gt; .\r@prefix tdb2: \u0026lt;http://jena.apache.org/2016/tdb#\u0026gt; .\r@prefix ja: \u0026lt;http://jena.hpl.hp.com/2005/11/Assembler#\u0026gt; .\r@prefix rdfs: \u0026lt;http://www.w3.org/2000/01/rdf-schema#\u0026gt; .\r@prefix fuseki: \u0026lt;http://jena.apache.org/fuseki#\u0026gt; .\rtdb2:DatasetTDB rdfs:subClassOf ja:RDFDataset .\rja:DatasetTxnMem rdfs:subClassOf ja:RDFDataset .\r\u0026lt;http://jena.hpl.hp.com/2008/tdb#DatasetTDB\u0026gt;\rrdfs:subClassOf ja:RDFDataset .\rja:ViewGraph rdfs:subClassOf ja:Model .\r\u0026lt;http://jena.hpl.hp.com/2008/tdb#GraphTDB\u0026gt;\rrdfs:subClassOf ja:Model .\rtdb2:GraphTDB2 rdfs:subClassOf ja:Model .\rja:MemoryDataset rdfs:subClassOf ja:RDFDataset .\rja:RDFDatasetZero rdfs:subClassOf ja:RDFDataset .\r\u0026lt;http://jena.apache.org/text#TextDataset\u0026gt;\rrdfs:subClassOf ja:RDFDataset .\r:service_tdb_all a fuseki:Service ;\rrdfs:label \u0026quot;TDB2 garden\u0026quot; ;\rfuseki:dataset :tdb_dataset_readwrite ;\rfuseki:name \u0026quot;garden\u0026quot; ;\rfuseki:serviceQuery \u0026quot;query\u0026quot; , \u0026quot;\u0026quot; , \u0026quot;sparql\u0026quot; ;\rfuseki:serviceReadGraphStore \u0026quot;get\u0026quot; ;\rfuseki:serviceReadWriteGraphStore\r\u0026quot;data\u0026quot; ;\rfuseki:serviceUpdate \u0026quot;\u0026quot; , \u0026quot;update\u0026quot; ;\rfuseki:serviceUpload \u0026quot;upload\u0026quot; .\r:tdb_dataset_readwrite\ra tdb2:DatasetTDB2 ;\rtdb2:location \u0026quot;/home/garden-user/etc/fuseki/run/databases/garden\u0026quot; .\rtdb2:GraphTDB rdfs:subClassOf ja:Model .\rja:RDFDatasetOne rdfs:subClassOf ja:RDFDataset .\rja:RDFDatasetSink rdfs:subClassOf ja:RDFDataset .\rtdb2:DatasetTDB2 rdfs:subClassOf ja:RDFDataset .\rデータベース設定ファイル「garden_rdf.ttl」を作成します。\nsudo -u fuseki vi /home/garden-user/etc/fuseki/run/configuration/garden_rdf.ttl\rgarden_rdf.ttl ファイルの内容は以下となります。\n@prefix : \u0026lt;http://base/#\u0026gt; .\r@prefix rdf: \u0026lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#\u0026gt; .\r@prefix tdb2: \u0026lt;http://jena.apache.org/2016/tdb#\u0026gt; .\r@prefix ja: \u0026lt;http://jena.hpl.hp.com/2005/11/Assembler#\u0026gt; .\r@prefix rdfs: \u0026lt;http://www.w3.org/2000/01/rdf-schema#\u0026gt; .\r@prefix fuseki: \u0026lt;http://jena.apache.org/fuseki#\u0026gt; .\rtdb2:DatasetTDB rdfs:subClassOf ja:RDFDataset .\rja:DatasetTxnMem rdfs:subClassOf ja:RDFDataset .\r\u0026lt;http://jena.hpl.hp.com/2008/tdb#DatasetTDB\u0026gt;\rrdfs:subClassOf ja:RDFDataset .\rja:ViewGraph rdfs:subClassOf ja:Model .\r\u0026lt;http://jena.hpl.hp.com/2008/tdb#GraphTDB\u0026gt;\rrdfs:subClassOf ja:Model .\rtdb2:GraphTDB2 rdfs:subClassOf ja:Model .\rja:MemoryDataset rdfs:subClassOf ja:RDFDataset .\rja:RDFDatasetZero rdfs:subClassOf ja:RDFDataset .\r\u0026lt;http://jena.apache.org/text#TextDataset\u0026gt;\rrdfs:subClassOf ja:RDFDataset .\r:service_tdb_all a fuseki:Service ;\rrdfs:label \u0026quot;TDB2 garden_rdf\u0026quot; ;\rfuseki:dataset :tdb_dataset_readwrite ;\rfuseki:name \u0026quot;garden_rdf\u0026quot; ;\rfuseki:serviceQuery \u0026quot;query\u0026quot; , \u0026quot;\u0026quot; , \u0026quot;sparql\u0026quot; ;\rfuseki:serviceReadGraphStore \u0026quot;get\u0026quot; ;\rfuseki:serviceReadWriteGraphStore\r\u0026quot;data\u0026quot; ;\rfuseki:serviceUpdate \u0026quot;\u0026quot; , \u0026quot;update\u0026quot; ;\rfuseki:serviceUpload \u0026quot;upload\u0026quot; .\r:tdb_dataset_readwrite\ra tdb2:DatasetTDB2 ;\rtdb2:location \u0026quot;/home/garden-user/etc/fuseki/run/databases/garden_rdf\u0026quot; .\rtdb2:GraphTDB rdfs:subClassOf ja:Model .\rja:RDFDatasetOne rdfs:subClassOf ja:RDFDataset .\rja:RDFDatasetSink rdfs:subClassOf ja:RDFDataset .\rtdb2:DatasetTDB2 rdfs:subClassOf ja:RDFDataset .\rFusekiのサービスを設定します。\nsudo vi /etc/systemd/system/fuseki.service\rfuseki.serviceの内容は以下となります。\n[Unit]\rDescription=Fuseki\r[Service]\r# Edit environment variables to match your installation\rEnvironment=FUSEKI_HOME=/home/garden-user/etc/fuseki\rEnvironment=FUSEKI_BASE=/home/garden-user/etc/fuseki/run\r# Edit the line below to adjust the amount of memory allocated to Fuseki\rEnvironment=JVM_ARGS=-Xmx4G\r# Edit to match your installation\rExecStart=/home/garden-user/etc/fuseki/fuseki-server\r# Run as user \u0026quot;fuseki\u0026quot;\rUser=fuseki\rRestart=on-abort\r# Java processes exit with status 143 when terminated by SIGTERM, this\r# should be considered a successful shutdown\rSuccessExitStatus=143\r### By default, the service logs to journalctl only.\r### If additional logging to a file is required, uncomment the following three lines\r# StandardOutput=syslog\r# StandardError=syslog\r# SyslogIdentifier=fuseki\r### This logs to syslog. If, e.g., rsyslogd is used, you can provide a file\r### /etc/rsyslog.d/fuseki.conf, consisting of the following two lines (uncommented)\r### if $programname == 'fuseki' then /var/log/fuseki/stderrout.log\r### if $programname == 'fuseki' then stop\r[Install]\rWantedBy=multi-user.target\r設定ファイルを再読込します。\nsudo systemctl daemon-reload\rサービスの自動起動を有効にします。\nsudo systemctl enable fuseki\rFusekiサービスを起動します。\nsudo systemctl start fuseki\rブラウザで Apache Jena Fuseki にアクセスします。\nhttp://localhost:3030/\n"
},
{
	"uri": "https://open-garden.github.io/garden/ja/scenarioexecutor/page5/",
	"title": "実行ログ",
	"tags": [],
	"description": "",
	"content": "ScenarioExecutorを実行すると、シミュレーション実行時のログが保存されます。\nログの保存先は~/ScenarioExecutor/logです。ファイル名はシナリオのファイル名と同じで、拡張子が.csvになります。\nログに保存される内容は以下の通りです。\n   項目 内容     timestamp タイムスタンプ(50ms間隔でログを保存します)   scene_id シナリオのscene_id   ego_x 自車両のx座標 (m)   ego_y 自車両のy座標 (m)   ego_z 自車両のz座標 (m)   ego_roll 自車両のroll (ラジアン)   ego_pitch 自車両のpitch (ラジアン)   ego_yaw 自車両のyaw (ラジアン)   ego_lane_id 自車両の最寄りのレーンID (RoadEditorで定義したルートの順番に0から番号が割り振られます)   collision 自車両の衝突の有無 (通常は0で衝突時は0以外の値になります)   obs0_x 障害物0のx座標 (m)   obs0_y 障害物0のy座標 (m)   obs0_z 障害物0のz座標 (m)   obs0_roll 障害物0のroll (ラジアン)   obs0_pitch 障害物0のpitch (ラジアン)   obs0_yaw 障害物0のyaw (ラジアン)   obs0_lane_id 障害物0の最寄りのレーンID (RoadEditorで定義したルートの順番に0から番号が割り振られます)    障害物が複数ある場合は、obs1,obs2…と続きます。\n座標は自車両、各障害物、すべて地図の原点からの座標になります。\n"
},
{
	"uri": "https://open-garden.github.io/garden/ja/build/tools/tomcat/",
	"title": "Tomcat",
	"tags": [],
	"description": "",
	"content": "Tomcatをインストールします。\ntomcatグループを作成します。\nsudo groupadd tomcat\rtomcatユーザを作成します。\nsudo useradd -s /bin/false -g tomcat -d /home/garden-user/etc/tomcat tomcat\rApache Tomcatをダウンロードします。Tomcat 9 の最新版をダウンロードしてください。ダウンロードのURLは以下から確認できます。 https://downloads.apache.org/tomcat/tomcat-9/\n確認したバージョンで以下の v9.x.x を変更して実行してください。\ncd ~/tmp\rwget https://downloads.apache.org/tomcat/tomcat-9/v9.x.x/bin/apache-tomcat-9.x.x.tar.gz\rダウンロードファイルを展開します。\nsudo tar xzvf apache-tomcat-9.x.x.tar.gz -C /home/garden-user/etc/tomcat --strip-components=1\r権限の設定をします。\ncd /home/garden-user/etc/tomcat\rsudo chgrp -R tomcat /home/garden-user/etc/tomcat\rsudo chown -R tomcat /home/garden-user/etc/tomcat\rsudo chmod -R 764 /home/garden-user/etc/tomcat\rTomcatのサービスを設定します。\nsudo vi /etc/systemd/system/tomcat.service\rtomcat.serviceの内容は以下となります。\n[Unit]\rDescription=Apache Tomcat Web Application Container\rAfter=network.target\r[Service]\rType=forking\rEnvironment=JAVA_HOME=/usr/lib/jvm/java-1.8.0-amazon-corretto\rEnvironment=CATALINA_PID=/home/garden-user/etc/tomcat/temp/tomcat.pid\rEnvironment=CATALINA_HOME=/home/garden-user/etc/tomcat\rEnvironment=CATALINA_BASE=/home/garden-user/etc/tomcat\rEnvironment='CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC'\rEnvironment='JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom'\rExecStart=/home/garden-user/etc/tomcat/bin/startup.sh\rExecStop=/home/garden-user/etc/tomcat/bin/shutdown.sh\rUser=tomcat\rGroup=tomcat\rUMask=0007\rRestartSec=10\rRestart=always\r[Install]\rWantedBy=multi-user.target\r設定ファイルを再読込します。\nsudo systemctl daemon-reload\rサービスの自動起動を有効にします。\nsudo systemctl enable tomcat\rTomcatサービスを起動します。\nsudo systemctl start tomcat\r"
},
{
	"uri": "https://open-garden.github.io/garden/ja/build/tools/influxdb/",
	"title": "InfluxDB",
	"tags": [],
	"description": "",
	"content": "InfluxDBをインストールします。\nリポジトリを追加します。\necho \u0026quot;deb https://repos.influxdata.com/ubuntu bionic stable\u0026quot; | sudo tee /etc/apt/sources.list.d/influxdb.list\rGPGキーをインポートします。\nsudo curl -sL https://repos.influxdata.com/influxdb.key | sudo apt-key add -\rInfluxDBをインストールします。\nsudo apt-get update\rsudo apt-get install influxdb\rinfluxdb.confを編集します。\nsudo vi /etc/influxdb/influxdb.conf\rbind-address を有効にします。\n[http]\r# Determines whether HTTP endpoint is enabled.\renabled = true\r# Determines whether the Flux query endpoint is enabled.\r# flux-enabled = false\r# Determines whether the Flux query logging is enabled.\r# flux-log-enabled = false\r# The bind address used by the HTTP service.\rbind-address = \u0026quot;:8086\u0026quot;\rInfluxDBを起動します。\nsudo systemctl start influxdb\r"
},
{
	"uri": "https://open-garden.github.io/garden/ja/build/tools/chronograf/",
	"title": "Chronograf",
	"tags": [],
	"description": "",
	"content": "chronografをインストールします。\nwgetで.debをダウンロードします。\ncd ~/tmp\rsudo wget https://dl.influxdata.com/chronograf/releases/chronograf_1.8.9.1_amd64.deb\rインストールします。\nsudo dpkg -i chronograf_1.8.9.1_amd64.deb\r設定ファイルを編集します。以下のようにEnvironment=\u0026quot;BASE_PATH=/chronograf\u0026quot;を追加します。\nsudo vi /lib/systemd/system/chronograf.service\r[Service]\rUser=chronograf\rGroup=chronograf\rEnvironment=\u0026quot;HOST=0.0.0.0\u0026quot;\rEnvironment=\u0026quot;PORT=8888\u0026quot;\rEnvironment=\u0026quot;BASE_PATH=/chronograf\u0026quot;\rEnvironment=\u0026quot;BOLT_PATH=/var/lib/chronograf/chronograf-v1.db\u0026quot;\rサービスの自動起動有効にします。\nsudo systemctl enable chronograf\r設定ファイルを再読込します。\nsudo systemctl --system daemon-reload\rchronografを起動します。\nsudo systemctl restart chronograf\r"
},
{
	"uri": "https://open-garden.github.io/garden/ja/build/tools/airflow/",
	"title": "Airflow",
	"tags": [],
	"description": "",
	"content": "Airflowをインストールします。\nairflowグループを作成します。\nsudo groupadd airflow\rairflowユーザを作成します。\nsudo useradd -s /bin/false -g airflow -d /home/garden-user/etc/airflow airflow\r権限の設定をします。\ncd /home/garden-user/etc/airflow\rsudo chgrp -R airflow /home/garden-user/etc/airflow\rsudo chown -R airflow /home/garden-user/etc/airflow\rsudo chmod -R 764 /home/garden-user/etc/airflow\rPython3.6をインストールします。\nsudo apt install python3.6 python3-pip\rpsql を使って PostgreSQL へ接続します。\nsudo -u postgres psql\r以下のように表示されます。\npsql (11.12 (Ubuntu 11.12-1.pgdg18.04+1))\r\u0026quot;help\u0026quot; でヘルプを表示します。\rpostgres=#\rデータベース「airflow」を作成します。\nCREATE DATABASE airflow;\rpsqlを終了してPostgreSQLから切断します。\n\\q\rユーザーを切り替えます。\nsudo su - airflow --shell=/bin/bash\r環境変数の設定をします。\nvi ~/.profile\r.profileの内容は以下となります。\n# Set airflow home\rexport AIRFLOW_HOME=\u0026quot;/home/garden-user/etc/airflow\u0026quot;\r# set python path\rexport PYTHONPATH=$PYTHONPATH:$AIRFLOW_HOME/dags:$AIRFLOW_HOME/dags/analyzer:$AIRFLOW_HOME/dags/analyzer/datas:$AIRFLOW_HOME/dags/analyzer/utils\r# set path so it includes user's pip global installations directory.\rexport PATH=~/.local/bin:$PATH\r# Set python\ralias python=\u0026quot;python3\u0026quot;\ralias pip=\u0026quot;pip3\u0026quot;\r変更を適用します。\nsource ~/.profile\rpsycopg2-binary と setuptools をインストールします。\npip install --user --upgrade pip setuptools\rpip install --user psycopg2-binary==2.9.1\rpip install --user apache-airflow-providers-postgres==1.0.2\rAirflowをインストールします。\nAIRFLOW_VERSION=2.0.1\rPYTHON_VERSION=\u0026quot;$(python --version | cut -d \u0026quot; \u0026quot; -f 2 | cut -d \u0026quot;.\u0026quot; -f 1-2)\u0026quot;\rCONSTRAINT_URL=\u0026quot;https://raw.githubusercontent.com/apache/airflow/constraints-${AIRFLOW_VERSION}/constraints-${PYTHON_VERSION}.txt\u0026quot;\rpip install --user \u0026quot;apache-airflow==${AIRFLOW_VERSION}\u0026quot; --constraint \u0026quot;${CONSTRAINT_URL}\u0026quot;\rpip install --user airflow_code_editor==4.0.0\rAirflowの初期化をします。\nairflow db init\rairflow.cfg を編集します。\nvi airflow.cfg\rairflow.cfgの下記の項目を修正します。\ndefault_timezone = Asia/Tokyo\rexecutor = LocalExecutor\rsql_alchemy_conn = postgresql+psycopg2://postgres:postgres@localhost:5432/airflow\rload_examples = False\rendpoint_url = http://localhost:8085/airflow\rauth_backend = airflow.api.auth.backend.basic_auth\rbase_url = http://localhost:8085/airflow\rdefault_ui_timezone = Asia/Tokyo\rweb_server_port = 8085\renable_proxy_fix = True\rflower_url_prefix = /airflow\rairflow.cfgに下記の項目を追加：\n[code_editor]\rgit_enabled = False\rairflow.cfgの変更を適用します。\nairflow db init\rアクセスユーザーの作成をします。\nairflow users create \\\r--role Admin \\\r--username admin \\\r--firstname admin \\\r--lastname user \\\r--email admin@acme.com \\\r--password admin\rairflowユーザーをログアウトします。\nexit\rairflow-scheduler.serviceファイルを作成します。\nsudo vi /etc/systemd/system/airflow-scheduler.service\rairflow-scheduler.serviceの内容は以下となります。\n[Unit]\rDescription=Airflow scheduler daemon\rAfter=network.target postgresql.service\rWants=postgresql.service\r[Service]\r# which airflow\rEnvironment=\u0026quot;PATH=/bin:/home/garden-user/etc/airflow/.local/bin:$PATH\u0026quot;\rEnvironment=\u0026quot;PYTHONPATH=$PYTHONPATH:/home/garden-user/etc/airflow/dags:/home/garden-user/etc/airflow/dags/analyzer:/home/garden-user/etc/airflow/dags/analyzer/datas:/home/garden-user/etc/airflow/dags/analyzer/utils\u0026quot;\r# AIRFLOW_HOME\rEnvironment=\u0026quot;AIRFLOW_CONFIG=/home/garden-user/etc/airflow/airflow.cfg\u0026quot;\rEnvironment=\u0026quot;AIRFLOW_HOME=/home/garden-user/etc/airflow\u0026quot;\r# Execute User\rUser=airflow\rGroup=airflow\rType=simple\r# which airflow\rExecStart= /home/garden-user/etc/airflow/.local/bin/airflow scheduler\rRestart=on-failure\rRestartSec=5s\rPrivateTmp=true\r[Install]\rWantedBy=multi-user.target\rairflow-webserver.serviceファイルを作成します。\nsudo vi /etc/systemd/system/airflow-webserver.service\rairflow-webserver.serviceの内容は以下となります。\n[Unit]\rDescription=Airflow scheduler daemon\rAfter=network.target postgresql.service\rWants=postgresql.service\r[Service]\r# which airflow\rEnvironment=\u0026quot;PATH=/bin:/home/garden-user/etc/airflow/.local/bin:$PATH\u0026quot;\rEnvironment=\u0026quot;PYTHONPATH=$PYTHONPATH:/home/garden-user/etc/airflow/dags:/home/garden-user/etc/airflow/dags/analyzer:/home/garden-user/etc/airflow/dags/analyzer/datas:/home/garden-user/etc/airflow/dags/analyzer/utils\u0026quot;\r# AIRFLOW_HOME\rEnvironment=\u0026quot;AIRFLOW_CONFIG=/home/garden-user/etc/airflow/airflow.cfg\u0026quot;\rEnvironment=\u0026quot;AIRFLOW_HOME=/home/garden-user/etc/airflow\u0026quot;\r# Execute User\rUser=airflow\rGroup=airflow\rType=simple\r# which airflow\rExecStart= /home/garden-user/etc/airflow/.local/bin/airflow webserver\rRestart=on-failure\rRestartSec=5s\rPrivateTmp=true\r[Install]\rWantedBy=multi-user.target\r設定ファイルを再読込します。\nsudo systemctl daemon-reload\rサービス自動起動を有効にします。\nsudo systemctl enable airflow-scheduler\rsudo systemctl enable airflow-webserver\rApache Airflow を起動します。\nsudo systemctl start airflow-scheduler\rsudo systemctl start airflow-webserver\rApache Airflow にアクセスします。\nhttp://localhost:8085/airflow\n"
},
{
	"uri": "https://open-garden.github.io/garden/ja/build/tools/nodejs/",
	"title": "Nodejs",
	"tags": [],
	"description": "",
	"content": "nodejs, npm をインストールします。\nsudo apt install -y nodejs npm\rn package をインストールします。\nsudo npm install n@7.3.0 -g\rn package を使って node をインストールします。\nsudo n 14.17.3\r最初にインストールした nodejs, npm は削除します。\nsudo apt purge -y nodejs npm\rバージョンを確認します。\nnode -v\rgarden-user のホームディレクトリに、npm グローバルインストール用のディレクトリを作成します。\nmkdir ~/.npm-global\r新しいディレクトリパスを使用するようにnpmを設定します。\nnpm config set prefix '~/.npm-global'\rシステム変数の設定をします。\ncat \u0026gt;\u0026gt; ~/.bashrc \u0026lt;\u0026lt;EOL\r# set path so it includes user's npm global installations directory.\rexport PATH=~/.npm-global/bin:$PATH\rEOL\rシステム変数を適用します。\nsource ~/.bashrc\r"
},
{
	"uri": "https://open-garden.github.io/garden/ja/build/tools/mongodb/",
	"title": "MongoDB",
	"tags": [],
	"description": "",
	"content": "MongoDBをインストールします。\nGPGキーをインポートします。\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4\rリポジトリを追加します。\necho \u0026quot;deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse\u0026quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list\rMongoDBをインストールします。\nsudo apt update\rsudo apt install mongodb-org=4.0.25\rMongoDBを起動します。\nsudo systemctl start mongod\rMongoDB compass をインストールします。\nブラウザで https://www.mongodb.com/try/download/compass にアクセスしてダウンロードします。\nMongoDB compass をインストールします。\nsudo dpkg -i EnterfileName.deb\rアクティビティからMongoDB compassを検索して実行します。\nNew Connectionタブを押下し、接続先URLを入力します。 （URL:mongodb://localhost:27017）\n"
},
{
	"uri": "https://open-garden.github.io/garden/ja/scenariomodeler/",
	"title": "Scenario Modeler",
	"tags": [],
	"description": "",
	"content": "   "
},
{
	"uri": "https://open-garden.github.io/garden/ja/scenarioanalyzer/",
	"title": "Scenario Analyzer",
	"tags": [],
	"description": "",
	"content": "   "
},
{
	"uri": "https://open-garden.github.io/garden/ja/scenarioroadeditor/",
	"title": "Scenario RoadEditor",
	"tags": [],
	"description": "",
	"content": "   "
},
{
	"uri": "https://open-garden.github.io/garden/ja/scenarioeditor/",
	"title": "Scenario Editor",
	"tags": [],
	"description": "",
	"content": "   "
},
{
	"uri": "https://open-garden.github.io/garden/ja/scenarioexecutor/",
	"title": "Scenario Executor",
	"tags": [],
	"description": "",
	"content": "   "
},
{
	"uri": "https://open-garden.github.io/garden/ja/build/",
	"title": "Build &amp; Install",
	"tags": [],
	"description": "",
	"content": "GARDEN ScenarioPlatform は Ubuntu 上の Webアプリケーションとして動作します。以下の手順に従って動作環境を構築します。\n ユーザー作成 ツールのインストール  PostgreSQL Java Apache2 Apache Jena Fuseki Tomcat InfluxDB Chronograf Airflow Node.js MongoDB   ビルド\u0026amp;インストール  GARDEN ScenarioPlatform は以下のプロダクト上に構築します。\n   プロダクト名 バージョン     Ubuntu 18.04   PostgreSQL 11.10   Apache Jena Fuseki 3.17.0   Apache2 2.4.29   Keycloak 12.0.4   InfluxDB 1.8.3   Chronograf 1.8.9.1   Airflow 2.0.1   MongoDB 4.0.22   MongoDB compass 1.24.6   Tomcat 9 9.x.x   Node.js 14.17.1    "
},
{
	"uri": "https://open-garden.github.io/garden/ja/license/",
	"title": "License",
	"tags": [],
	"description": "",
	"content": "GARDEN ScenarioPlatform のソースコードは BSD 3-Clause License の下で配布されています。\n"
},
{
	"uri": "https://open-garden.github.io/garden/ja/contact/",
	"title": "Contact",
	"tags": [],
	"description": "",
	"content": "お問合せ先： open-garden@googlegroups.com\nopen-garden@googlegroups.com 宛にお問い合わせ頂いた内容については、開発者である株式会社NTTデータオートモビリジェンス研究所にて内容を確認のうえ、ご回答させて頂きます。お問合せ頂きました情報は、匿名の情報として、GARDEN ScenarioPlatformの発展を目的に使用されます。\nNotice : The content of your inquiry will be shared with NTT DATA Automobiligence Research Center, Ltd.\n"
},
{
	"uri": "https://open-garden.github.io/garden/ja/",
	"title": "GARDEN ScenarioPlatform",
	"tags": [],
	"description": "",
	"content": "GARDEN Scenario Platform GARDEN ScenarioPlatform はシナリオベースの開発プロセスをサポートするオープンソースツールのセットです。\n  SourceCode github を参照してください。\n機能概要 GARDEN ScenarioPlatform では、大きく５つの機能を実現します。\n Scenario Modeler Scenario Analyzer Scenario RoadEditor Scenario Editor Scenario Executor  "
},
{
	"uri": "https://open-garden.github.io/garden/ja/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://open-garden.github.io/garden/ja/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
